{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/common/Observable.ts","webpack:///./src/game/shared/ValueContainer.ts","webpack:///./src/game/shared/GameSystem.ts","webpack:///./src/game/resources/ResourceType.ts","webpack:///./src/game/resources/ResourceValue.ts","webpack:///./src/rendering/react/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/rendering/react/components/UIGame.tsx","webpack:///./src/game/Game.ts","webpack:///./src/common/ObservableSubscription.ts","webpack:///./src/game/resources/ResourceSystem.ts","webpack:///./src/game/resources/Resource.ts","webpack:///./src/game/workers/WorkerSystem.ts","webpack:///./src/game/workers/ResourceJob.ts","webpack:///./src/game/workers/Job.ts","webpack:///./src/game/buildings/BuildingSystem.ts","webpack:///./src/game/buildings/Building.ts","webpack:///./src/rendering/react/components/UIGameContext.tsx","webpack:///./src/rendering/react/components/structure/UIHeader.tsx","webpack:///./src/rendering/react/components/structure/UIBody.tsx","webpack:///./src/rendering/react/components/workers/UIJobList.tsx","webpack:///./src/rendering/react/components/workers/UIJobLine.tsx","webpack:///./src/rendering/react/components/buildings/UIBuildingList.tsx","webpack:///./src/rendering/react/components/buildings/UIBuildingLine.tsx","webpack:///./src/rendering/react/components/resources/UIResourceList.tsx","webpack:///./src/rendering/react/components/resources/UIResourceLine.tsx","webpack:///./src/common/NumberFormatter.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","ObservableFactory","subscriptions","observer","callback","subscription","ObservableSubscription","this","push","filter","args","forEach","apply","ValueModifier","amount","additiveModifiers","multiplicativeModifiers","onValueChange","createWith1Argument","newValue","mod","notify","existingModifier","find","newModifier","recalculateValue","_isUnlocked","onUnlocked","dTime","ResourceType","resourceType","baseValue","ValueContainer","setAdditiveModifier","ReactDOM","render","UIGame","document","getElementById","Component","props","super","state","game","newGame","Game","new","buildingSystem","addSubscription","forceUpdate","setState","UIHeader","versionNumber","onNewGameClick","GameContext","Provider","UIBody","updateFrequency","maxTimeToResumePerUpdate","lastUpdateAsNumber","Date","now","onUpdated","init","startNewGame","BuildingSystem","resourceSystem","ResourceSystem","workerSystem","WorkerSystem","startTimeAsNumber","refreshSystemsIsUnlocked","refreshResourcesIsUnlocked","beginUpdating","updateIntervalID","setInterval","update","timeSinceLastUpdate","updateGameSystems","isUnlocked","totalWorkerCount","idleWorkerCount","GameSystem","resources","resourceMap","Map","type","Resource","addResourceType","Food","Wood","Stone","Pelt","Gold","Devotion","resource","set","dAmount","income","resourceValues","every","resourceValue","getResource","_","recalculateIdleWorkerCount","gathererJob","ResourceJob","woodcutterJob","resourceJobs","jobs","job","onWorkerCountChange","workerCount","resourceIncomeFromJob","onIdleWorkerCountChange","newCount","dWorkerCount","Job","description","incomePerSecond","_workerCount","buildings","baseCost","additiveCostPerBuilding","multiplicativeCostPerBuilding","onUpdateAmount","Building","resourceValueInput","map","input","ResourceValue","addBuilding","buildResourceValues","thisBuilding","building","cost","getCostOfNextBuilding","hasResources","payResources","incrementAmount","costResource","Math","pow","setMultiplicativeModifier","createContext","id","className","onClick","UIJobList","UIBuildingList","UIResourceList","UIJobLine","newWorkerCount","setWorkers","setWorkerCountOnJob","addWorker","removeWorker","UIBuildingLine","buyBuilding","buy","getResources","UIResourceLine","NumberFormatter","Format","number","maxDecimals","minDecimals","ceil","undefined","multiplier","roundedNumber","floor","toFixed","toString"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = React;","import { ObservableSubscription } from \"./ObservableSubscription\";\r\n\r\nexport interface Observable {\r\n    addSubscription(observer: object, callback: () => void): void;\r\n    removeSubscription(observer: object): void;\r\n    notify(): void;\r\n}\r\nexport interface ObservableWith1Argument<T0> {\r\n    addSubscription(observer: object, callback: (p0: T0) => void): void;\r\n    removeSubscription(observer: object): void;\r\n    notify(p0: T0): void;\r\n}\r\nexport interface ObservableWith2Arguments<T0, T1> {\r\n    addSubscription(observer: object, callback: (p0: T0, p1: T1) => void): void;\r\n    removeSubscription(observer: object): void;\r\n    notify(p0: T0, p1: T1): void;\r\n}\r\n\r\nexport class ObservableFactory {\r\n    private subscriptions: ObservableSubscription[] = [];\r\n\r\n    private constructor() {}\r\n\r\n    public static create(): Observable {\r\n        return new ObservableFactory();\r\n    } \r\n    public static createWith1Argument<T0>(): ObservableWith1Argument<T0> {\r\n        return new ObservableFactory();\r\n    } \r\n    public static createWith2Arguments<T0, T1>(): ObservableWith2Arguments<T0, T1> {\r\n        return new ObservableFactory();\r\n    }\r\n\r\n    public addSubscription (observer: object, callback: (...args: any[]) => void): void {\r\n        const subscription = new ObservableSubscription(observer, callback);\r\n        this.subscriptions.push (subscription);\r\n    }\r\n\r\n    public removeSubscription (observer: object): void {\r\n        this.subscriptions = this.subscriptions.filter(s => s.observer !== observer);\r\n    }\r\n\r\n    public notify (...args: any[]): void {\r\n        this.subscriptions.forEach(subscription => subscription.callback.apply(subscription.observer, args));\r\n    }\r\n}","import { ObservableWith1Argument, ObservableFactory } from \"../../common/Observable\";\r\n\r\nclass ValueModifier {\r\n    public amount: number;\r\n    public key: any;\r\n\r\n    constructor (key: any, amount: number) {\r\n        this.amount = amount;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\nexport class ValueContainer {\r\n    private additiveModifiers: ValueModifier[] = [];\r\n    private multiplicativeModifiers: ValueModifier[] = [];\r\n    public value = 0;\r\n    public onValueChange: ObservableWith1Argument<number> = ObservableFactory.createWith1Argument<number>();\r\n    public recalculateValue (): void {\r\n        let newValue = 0;\r\n        this.additiveModifiers.forEach(mod => newValue += mod.amount);\r\n        this.multiplicativeModifiers.forEach(mod => newValue *= mod.amount);\r\n        if (this.value !== newValue) {\r\n            this.value = newValue;\r\n            this.onValueChange.notify(newValue);\r\n        }\r\n    }\r\n    public setAdditiveModifier (key: any, amount: number) {\r\n        const existingModifier = this.additiveModifiers.find(mod => mod.key === key);\r\n        if (existingModifier) {\r\n            existingModifier.amount = amount;\r\n        } else {\r\n            const newModifier = new ValueModifier(key, amount);\r\n            this.additiveModifiers.push(newModifier);\r\n        }\r\n        this.recalculateValue();\r\n    }\r\n    public setMultiplicativeModifier (key: any, amount: number) {\r\n        const existingModifier = this.multiplicativeModifiers.find(mod => mod.key === key);\r\n        if (existingModifier) {\r\n            existingModifier.amount = amount;\r\n        } else {\r\n            const newModifier = new ValueModifier(key, amount);\r\n            this.multiplicativeModifiers.push(newModifier);\r\n        }\r\n        this.recalculateValue();\r\n    }\r\n    public removeAllModifiers (key: any): void {\r\n        this.additiveModifiers = this.additiveModifiers.filter(mod => mod.key !== key);\r\n        this.multiplicativeModifiers = this.multiplicativeModifiers.filter(mod => mod.key !== key);\r\n    }\r\n}\r\n","import { Observable, ObservableFactory } from \"../../common/Observable\";\r\n\r\nexport class GameSystem {\r\n    private _isUnlocked: boolean = false;\r\n    public get isUnlocked(): boolean { return this._isUnlocked; };\r\n    public set isUnlocked(value) { \r\n        if (this._isUnlocked !== value) {\r\n            this._isUnlocked = value;\r\n            if (value) {\r\n                this.onUnlocked.notify();\r\n            }\r\n        }\r\n    };\r\n    public onUnlocked: Observable = ObservableFactory.create();\r\n    public update(dTime: number): void {}\r\n    public init(): void {}\r\n}\r\n","export enum ResourceType {\r\n    Devotion,\r\n    Food,\r\n    Gold,\r\n    Pelt,\r\n    Stone,\r\n    Wood\r\n}","import { ResourceType } from \"./ResourceType\";\r\nimport { ValueContainer } from \"../shared/ValueContainer\";\r\n\r\nexport class ResourceValue {\r\n    public resourceType: ResourceType;\r\n    public value: ValueContainer;\r\n    public constructor (resourceType: ResourceType, baseValue: number) {\r\n        this.resourceType = resourceType;\r\n        this.value = new ValueContainer();\r\n        this.value.setAdditiveModifier(this, baseValue);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { UIGame } from \"./components/UIGame\";\r\n\r\nReactDOM.render(\r\n    <UIGame />,\r\n    document.getElementById(\"game-container\")\r\n);","module.exports = ReactDOM;","import * as React from \"react\";\r\nimport { Game } from \"../../../game/Game\";\r\nimport { UIResourceList } from \"./resources/UIResourceList\";\r\nimport { UIJobList } from \"./workers/UIJobList\";\r\nimport { GameContext } from \"./UIGameContext\";\r\nimport { UIBuildingList } from \"./buildings/UIBuildingList\";\r\nimport { UIHeader } from \"./structure/UIHeader\";\r\nimport { UIBody } from \"./structure/UIBody\";\r\n\r\nexport class UIGame extends React.Component<{}, {game: Game}> {\r\n    constructor (props: {game: Game}) {\r\n        super(props);\r\n\r\n        this.state = {game: null};\r\n    }\r\n    newGame() {\r\n        const newGame = Game.new();\r\n        newGame.buildingSystem.onUnlocked.addSubscription(this, () => this.forceUpdate());\r\n        this.setState({game: newGame});\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <UIHeader versionNumber={'0.0.1'} onNewGameClick={()=>this.newGame()}></UIHeader>\r\n                {\r\n                    this.state.game\r\n                    ? \r\n                    <GameContext.Provider value={this.state.game}>\r\n                        <UIBody game={this.state.game}></UIBody>\r\n                    </GameContext.Provider>\r\n                    : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import { Observable, ObservableFactory } from \"../common/Observable\";\r\nimport { ResourceSystem } from \"./resources/ResourceSystem\";\r\nimport { WorkerSystem } from \"./workers/WorkerSystem\";\r\nimport { BuildingSystem } from \"./buildings/BuildingSystem\";\r\n\r\nexport class Game {\r\n    private updateFrequency: number = 100;\r\n    private maxTimeToResumePerUpdate: number = 24 * 60 * 60 * 1000;\r\n\r\n    private updateIntervalID: number;\r\n    private lastUpdateAsNumber: number = Date.now();\r\n    \r\n    private startTimeAsNumber: number;\r\n\r\n    public buildingSystem: BuildingSystem;\r\n    public resourceSystem: ResourceSystem;\r\n    public workerSystem: WorkerSystem;\r\n\r\n    public onUpdated: Observable = ObservableFactory.create();\r\n\r\n    public static new(): Game {\r\n        const game = new Game();\r\n        game.init();\r\n        game.startNewGame();\r\n        return game;\r\n    }\r\n\r\n    private constructor () {}\r\n\r\n    public init (): void {\r\n        this.buildingSystem = new BuildingSystem(this);\r\n        this.buildingSystem.init();\r\n\r\n        this.resourceSystem = new ResourceSystem();\r\n        this.resourceSystem.init();\r\n\r\n        this.workerSystem = new WorkerSystem(this);\r\n        this.workerSystem.init();\r\n    }\r\n\r\n    public startNewGame (): void {\r\n        this.startTimeAsNumber = Date.now();\r\n        this.workerSystem.newGame();\r\n        this.refreshSystemsIsUnlocked();\r\n        this.resourceSystem.refreshResourcesIsUnlocked();\r\n        this.beginUpdating();\r\n    }\r\n\r\n    private beginUpdating(): void {\r\n        this.updateIntervalID = setInterval(() => {\r\n            this.update();\r\n        }, this.updateFrequency);\r\n    }\r\n\r\n    private update (): void {\r\n        let timeSinceLastUpdate = Date.now() - this.lastUpdateAsNumber;\r\n\r\n        // Cap catch up duration\r\n        if (timeSinceLastUpdate > this.maxTimeToResumePerUpdate) {\r\n            timeSinceLastUpdate = this.maxTimeToResumePerUpdate;\r\n            this.lastUpdateAsNumber = Date.now() - this.maxTimeToResumePerUpdate;\r\n        }\r\n\r\n        // Update until caught up\r\n        while (timeSinceLastUpdate > this.updateFrequency) {\r\n            timeSinceLastUpdate -= this.updateFrequency;\r\n            this.lastUpdateAsNumber = this.lastUpdateAsNumber + this.updateFrequency;\r\n\r\n            this.updateGameSystems(this.updateFrequency);\r\n        }\r\n\r\n        this.onUpdated.notify();\r\n    }\r\n\r\n    private updateGameSystems (dTime: number): void {        \r\n        this.resourceSystem.update(dTime);\r\n    }\r\n\r\n    private refreshSystemsIsUnlocked() {\r\n        this.workerSystem.isUnlocked = true;\r\n        this.resourceSystem.isUnlocked = true;\r\n        this.buildingSystem.isUnlocked = this.workerSystem.totalWorkerCount.value > 1 || this.workerSystem.idleWorkerCount === 0;\r\n    }\r\n}","export class ObservableSubscription {\r\n    public observer: object;\r\n    public callback: (...args: any[]) => void;\r\n    public constructor (observer: object, callback: (...args: any[]) => void) {\r\n        this.observer = observer;\r\n        this.callback = callback;\r\n    }\r\n}","import { GameSystem } from \"../shared/GameSystem\";\r\nimport { Resource } from \"./Resource\";\r\nimport { ResourceType } from \"./ResourceType\";\r\nimport { ResourceValue } from \"./ResourceValue\";\r\n\r\nexport class ResourceSystem extends GameSystem {\r\n    public resources: Resource[] = [];\r\n    public resourceMap: Map<ResourceType, Resource> = new Map();\r\n    private addResourceType(name: string, type: ResourceType): void {\r\n        this.resources.push(new Resource(name, type));\r\n    }\r\n    public init(): void {\r\n        this.addResourceType(\"Food\", ResourceType.Food);\r\n        this.addResourceType(\"Wood\", ResourceType.Wood);\r\n        this.addResourceType(\"Stone\", ResourceType.Stone);\r\n        this.addResourceType(\"Pelt\", ResourceType.Pelt);\r\n        this.addResourceType(\"Gold\", ResourceType.Gold);\r\n        this.addResourceType(\"Devotion\", ResourceType.Devotion);\r\n\r\n        this.resources.forEach(resource => this.resourceMap.set(resource.type, resource));\r\n    }\r\n    public getResource(type: ResourceType): Resource {\r\n        return this.resourceMap.get(type);\r\n    }\r\n    public update(dTime: number): void {\r\n        this.resources.forEach(resource => {\r\n            const dAmount = resource.income.value * dTime / 1000;\r\n            resource.amount += dAmount;\r\n        });\r\n    }\r\n    public hasResources(resourceValues: ResourceValue[]): boolean {\r\n        return resourceValues.every(resourceValue => {\r\n            const resource = this.getResource(resourceValue.resourceType);\r\n            return resource.amount >= resourceValue.value.value;\r\n        });\r\n    }\r\n    public payResources(resourceValues: ResourceValue[]): void {\r\n        return resourceValues.forEach(resourceValue => {\r\n            const resource = this.getResource(resourceValue.resourceType);\r\n            resource.amount -= resourceValue.value.value;\r\n        });\r\n    }\r\n    public refreshResourcesIsUnlocked() {\r\n        this.resourceMap.get(ResourceType.Food).isUnlocked = true;\r\n        this.resourceMap.get(ResourceType.Wood).isUnlocked = true;\r\n    }\r\n}\r\n","import { ValueContainer } from \"../shared/ValueContainer\";\r\nimport { ResourceType } from \"./ResourceType\";\r\nimport { Observable, ObservableFactory } from \"../../common/Observable\";\r\n\r\nexport class Resource {\r\n    private _isUnlocked: boolean = false;\r\n    public get isUnlocked(): boolean { return this._isUnlocked; };\r\n    public set isUnlocked(value) { \r\n        if (this._isUnlocked !== value) {\r\n            this._isUnlocked = value;\r\n            if (value) {\r\n                this.onUnlocked.notify();\r\n            }\r\n        }\r\n    };\r\n    public onUnlocked: Observable = ObservableFactory.create();\r\n    public amount: number = 0;\r\n    public income: ValueContainer = new ValueContainer();\r\n    public name: string;\r\n    public type: ResourceType;\r\n    public constructor(name: string, type: ResourceType) {\r\n        this.name = name;\r\n        this.type = type;\r\n    }\r\n}","import { GameSystem } from \"../shared/GameSystem\";\r\nimport { ObservableWith1Argument, ObservableFactory } from \"../../common/Observable\";\r\nimport { ResourceJob } from \"./ResourceJob\";\r\nimport { ResourceType } from \"../resources/ResourceType\";\r\nimport { Game } from \"../Game\";\r\nimport { Job } from \"./Job\";\r\nimport { ValueContainer } from \"../shared/ValueContainer\";\r\n\r\nexport class WorkerSystem extends GameSystem {\r\n    private game: Game;\r\n\r\n    public idleWorkerCount: number;\r\n    public totalWorkerCount: ValueContainer;\r\n    public onIdleWorkerCountChange: ObservableWith1Argument<number>;\r\n\r\n    public gathererJob: ResourceJob;\r\n    public woodcutterJob: ResourceJob;\r\n    public resourceJobs: ResourceJob[];\r\n\r\n    public jobs: Job[];\r\n\r\n    public constructor (game: Game) {\r\n        super();\r\n        this.game = game;\r\n    }\r\n\r\n    public init(): void {\r\n        this.totalWorkerCount = new ValueContainer();\r\n        this.totalWorkerCount.setAdditiveModifier(this, 1);\r\n        this.totalWorkerCount.onValueChange.addSubscription(this, _ => this.recalculateIdleWorkerCount());\r\n\r\n        this.gathererJob = new ResourceJob(\"Gatherer\", \"Search nearby forests for berries and shrooms\", 0.5, ResourceType.Food);\r\n        this.woodcutterJob = new ResourceJob(\"Woodcutter\", \"Chop down trees for wood\", 25, ResourceType.Wood);\r\n        this.resourceJobs = [\r\n            this.gathererJob,\r\n            this.woodcutterJob\r\n        ];\r\n\r\n        this.jobs = [...this.resourceJobs];\r\n\r\n        // Bind resource jobs to resources\r\n        this.resourceJobs.forEach(job => {\r\n            const resource = this.game.resourceSystem.getResource(job.resourceType);\r\n            job.onWorkerCountChange.addSubscription(this, (workerCount: number) => {\r\n                const resourceIncomeFromJob = workerCount * job.value.value;\r\n                resource.income.setAdditiveModifier(job, resourceIncomeFromJob);\r\n            });\r\n        });\r\n\r\n        this.onIdleWorkerCountChange = ObservableFactory.createWith1Argument<number>();\r\n    }\r\n\r\n    public newGame(): void {\r\n        this.recalculateIdleWorkerCount();\r\n    }\r\n\r\n    public recalculateIdleWorkerCount(): void {\r\n        let newCount = this.totalWorkerCount.value;\r\n        this.jobs.forEach(job => newCount -= job.workerCount);\r\n        if (this.idleWorkerCount !== newCount) {\r\n            this.idleWorkerCount = newCount;\r\n            this.onIdleWorkerCountChange.notify(this.idleWorkerCount);\r\n        }\r\n    }\r\n\r\n    public setWorkerCountOnJob(job: Job, workerCount: number) {\r\n        const dWorkerCount = workerCount - job.workerCount;\r\n        if (dWorkerCount > 0) {\r\n            if (this.idleWorkerCount >= dWorkerCount) {\r\n                job.workerCount += dWorkerCount;\r\n            } else {\r\n                throw `Cannot assign ${dWorkerCount} workers - only ${this.idleWorkerCount} workers available.`;\r\n            }\r\n        } else {\r\n            if (workerCount >= 0) {\r\n                job.workerCount += dWorkerCount;\r\n            } else {\r\n                throw `Cannot assign a negative amount of workers to a job`;\r\n            }\r\n        }\r\n        this.game.buildingSystem.isUnlocked = true;\r\n        this.recalculateIdleWorkerCount();\r\n    }\r\n}","import { ResourceType } from \"../resources/ResourceType\";\r\nimport { Job } from \"./Job\";\r\n\r\nexport class ResourceJob extends Job {\r\n    public resourceType: ResourceType;\r\n\r\n    public constructor(name: string, description: string, incomePerSecond: number, resourceType: ResourceType) {\r\n        super(name, description, incomePerSecond);\r\n        this.resourceType = resourceType;\r\n    }\r\n}","import { ValueContainer } from \"../shared/ValueContainer\";\r\nimport { ObservableFactory, ObservableWith1Argument } from \"../../common/Observable\";\r\n\r\nexport class Job {\r\n    constructor (name: string, description: string, value: number) {\r\n        this._workerCount = 0;\r\n\r\n        this.name = name;\r\n        this.description = description;\r\n        this.value = new ValueContainer();\r\n        this.value.setAdditiveModifier(this, value);\r\n        this.onWorkerCountChange = ObservableFactory.createWith1Argument<number>();\r\n    }\r\n    public name: string;\r\n    public description: string;\r\n    public value: ValueContainer;\r\n    public onWorkerCountChange: ObservableWith1Argument<number>;\r\n\r\n    private _workerCount: number;\r\n    public get workerCount(): number {\r\n        return this._workerCount;\r\n    }\r\n    public set workerCount(value: number) {\r\n        this._workerCount = value;\r\n        this.onWorkerCountChange.notify(value);\r\n    }\r\n}","import { GameSystem } from \"../shared/GameSystem\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceValue } from \"../resources/ResourceValue\";\r\nimport { ResourceType } from \"../resources/ResourceType\";\r\nimport { Game } from \"../Game\";\r\n\r\nexport class BuildingSystem extends GameSystem {\r\n    private game: Game;\r\n    public buildings: Building[] = [];\r\n    public constructor(game: Game) {\r\n        super();\r\n        this.game = game;\r\n    }\r\n    private addBuilding(\r\n        name: string,\r\n        description: string,\r\n        baseCost: ResourceValue[],\r\n        additiveCostPerBuilding: ResourceValue[],\r\n        multiplicativeCostPerBuilding: ResourceValue[],\r\n        onUpdateAmount: (thisBuilding: Building) => void\r\n    ): void {\r\n        this.buildings.push(new Building(name, description, baseCost, additiveCostPerBuilding, multiplicativeCostPerBuilding, onUpdateAmount));\r\n    }\r\n    private buildResourceValues(...resourceValueInput: [ResourceType, number][]): ResourceValue[] {\r\n        return resourceValueInput.map(input => new ResourceValue(input[0], input[1]));\r\n    }\r\n    public init(): void {\r\n        this.addBuilding(\r\n            'Hut', \r\n            'Allows another worker to join your village',\r\n            this.buildResourceValues([ResourceType.Wood, 100]),\r\n            this.buildResourceValues([ResourceType.Wood, 20]),\r\n            this.buildResourceValues([ResourceType.Wood, 1.2]),\r\n            (thisBuilding: Building): void => {\r\n              this.game.workerSystem.totalWorkerCount.setAdditiveModifier(thisBuilding, thisBuilding.amount);\r\n            }\r\n        );\r\n    }\r\n    public buyBuilding(building: Building): void {\r\n        const cost = building.getCostOfNextBuilding();\r\n        if (this.game.resourceSystem.hasResources(cost)) {\r\n            this.game.resourceSystem.payResources(cost);\r\n            building.incrementAmount();\r\n        }\r\n    }\r\n}","import { ResourceValue } from \"../resources/ResourceValue\";\r\nimport { ObservableFactory, ObservableWith1Argument } from \"../../common/Observable\";\r\n\r\nexport class Building {\r\n    public onUpdateAmount: ObservableWith1Argument<Building>;\r\n    public amount: number;\r\n    public name: string;\r\n    public description: string;\r\n    public baseCost: ResourceValue[];\r\n    public additiveCostPerBuilding: ResourceValue[];\r\n    public multiplicativeCostPerBuilding: ResourceValue[];\r\n    public constructor(\r\n        name: string,\r\n        description: string,\r\n        baseCost: ResourceValue[],\r\n        additiveCostPerBuilding: ResourceValue[],\r\n        multiplicativeCostPerBuilding: ResourceValue[],\r\n        onUpdateAmount: (thisBuilding: Building) => void\r\n    ) {\r\n        this.amount = 0;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.baseCost = baseCost;\r\n        this.additiveCostPerBuilding = additiveCostPerBuilding;\r\n        this.multiplicativeCostPerBuilding = multiplicativeCostPerBuilding;\r\n        this.onUpdateAmount = ObservableFactory.createWith1Argument<Building>();\r\n        this.onUpdateAmount.addSubscription(this, onUpdateAmount);\r\n    }\r\n    public incrementAmount() {\r\n        this.amount++;\r\n        this.onUpdateAmount.notify(this);\r\n    }\r\n    public getCostOfNextBuilding(): ResourceValue[] {\r\n        const cost: ResourceValue[] = [];\r\n        this.baseCost.forEach(c => cost.push(new ResourceValue(c.resourceType, c.value.value)));\r\n        this.additiveCostPerBuilding.forEach(c => {\r\n            const value = this.amount * c.value.value;\r\n            if (value > 0) {\r\n                const costResource = cost.find(resource => resource.resourceType === c.resourceType);\r\n                if (costResource) {\r\n                    costResource.value.setAdditiveModifier(c, value);\r\n                } else {\r\n                    cost.push(new ResourceValue(c.resourceType, value));\r\n                }\r\n            }\r\n        });\r\n        this.multiplicativeCostPerBuilding.forEach(c => {\r\n            const value = Math.pow(c.value.value, this.amount);\r\n            if (value > 0) {\r\n                const costResource = cost.find(resource => resource.resourceType === c.resourceType);\r\n                if (costResource) {\r\n                    costResource.value.setMultiplicativeModifier(c, value);\r\n                }\r\n            }\r\n        });\r\n        return cost;\r\n    }\r\n}\r\n","import React = require(\"react\");\r\nimport { Game } from \"../../../game/Game\";\r\n\r\nexport const GameContext = React.createContext<Game>(null);\r\n","import React = require(\"react\");\r\n\r\nexport class UIHeader extends React.Component<{versionNumber: string, onNewGameClick: () => void}> {\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div id=\"header\">\r\n                <span className=\"title-container\">\r\n                    <span className=\"title\">Quiet Village</span>\r\n                    <span className=\"version-number\">v{this.props.versionNumber}</span>\r\n                </span>\r\n                <span className=\"button btn-new-game\" onClick={this.props.onNewGameClick}>New game</span>\r\n            </div>\r\n        );\r\n    }\r\n}","import React = require(\"react\");\r\nimport { Game } from \"../../../../game/Game\";\r\nimport { UIJobList } from \"../workers/UIJobList\";\r\nimport { UIBuildingList } from \"../buildings/UIBuildingList\";\r\nimport { UIResourceList } from \"../resources/UIResourceList\";\r\n\r\nexport class UIBody extends React.Component<{game: Game}> {\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div id=\"body\">\r\n                <span>\r\n                    <UIJobList game={this.props.game}></UIJobList>\r\n                    {\r\n                        this.props.game.buildingSystem.isUnlocked \r\n                        ? <UIBuildingList game={this.props.game}></UIBuildingList> \r\n                        : null \r\n                    }\r\n                </span>\r\n                <UIResourceList game={this.props.game}></UIResourceList>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { UIJobLine } from \"./UIJobLine\";\r\nimport { Game } from \"../../../../game/Game\";\r\n\r\nexport class UIJobList extends React.Component<{game: Game}> {\r\n    constructor (props: {game: Game}) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <ul>\r\n            {this.props.game.workerSystem.jobs.map((job) => \r\n                <UIJobLine key={job.name} game={this.props.game} job={job}>\r\n                </UIJobLine>\r\n            )}\r\n            </ul>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Job } from \"../../../../game/workers/Job\";\r\nimport { Game } from \"../../../../game/Game\";\r\n\r\ninterface JobLine {\r\n    name: string,\r\n    workerCount: number\r\n}\r\nexport class UIJobLine extends React.Component<{game: Game, job: Job}, JobLine> {\r\n    public constructor (props: {game: Game, job: Job}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: this.props.job.name,\r\n            workerCount: this.props.job.workerCount\r\n        };\r\n\r\n        this.props.job.onWorkerCountChange.addSubscription(\r\n            this,\r\n            (newWorkerCount: number) => \r\n                this.setState({workerCount: newWorkerCount}));\r\n    }\r\n    private addWorker (): void {\r\n        const newWorkerCount = this.props.job.workerCount + 1;\r\n        this.setWorkers(newWorkerCount);\r\n    }\r\n    private removeWorker (): void {\r\n        const newWorkerCount = this.props.job.workerCount - 1;\r\n        this.setWorkers(newWorkerCount);\r\n    }\r\n    private setWorkers(newWorkerCount: number): void {\r\n        this.props.game.workerSystem.setWorkerCountOnJob(this.props.job, newWorkerCount);\r\n    }\r\n    public render(): JSX.Element {\r\n        return (\r\n            <li key={this.state.name}>\r\n                <span>{this.state.name}</span>\r\n                <span>{this.state.workerCount}</span>\r\n                <input type=\"button\" onClick={()=>this.addWorker()} value=\"Add\"/>\r\n                <input type=\"button\" onClick={()=>this.removeWorker()} value=\"Remove\"/>\r\n            </li>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Game } from \"../../../../game/Game\";\r\nimport { UIBuildingLine } from \"./UIBuildingLine\";\r\n\r\nexport class UIBuildingList extends React.Component<{game: Game}> {\r\n    constructor (props: {game: Game}) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <ul>\r\n            {this.props.game.buildingSystem.buildings.map((building) => \r\n                <UIBuildingLine key={building.name} game={this.props.game} building={building}>\r\n                </UIBuildingLine>\r\n            )}\r\n            </ul>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Game } from \"../../../../game/Game\";\r\nimport { Building } from \"../../../../game/buildings/Building\";\r\n\r\ninterface BuildingLine {\r\n    name: string,\r\n    amount: number\r\n}\r\nexport class UIBuildingLine extends React.Component<{game: Game, building: Building}, BuildingLine> {\r\n    public constructor (props: {game: Game, building: Building}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: this.props.building.name,\r\n            amount: this.props.building.amount\r\n        };\r\n\r\n        this.props.building.onUpdateAmount.addSubscription(\r\n            this,\r\n            (thisBuilding: Building) => \r\n                this.setState({amount: thisBuilding.amount}));\r\n    }\r\n    private buy (): void {\r\n        this.props.game.buildingSystem.buyBuilding(this.props.building);\r\n    }\r\n    public render(): JSX.Element {\r\n        return (\r\n            <li key={this.state.name}>\r\n                <span>{this.state.name}</span>\r\n                <span>{this.state.amount}</span>\r\n                <input type=\"button\" onClick={()=>this.buy()} value=\"Buy\"/>\r\n            </li>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Game } from \"../../../../game/Game\";\r\nimport { UIResourceLine } from \"./UIResourceLine\";\r\nimport { Resource } from \"../../../../game/resources/Resource\";\r\n\r\nexport class UIResourceList extends React.Component<{game: Game}, {resources: Resource[]}> {\r\n    constructor (props: {game: Game}) {\r\n        super(props);\r\n\r\n        const getResources = () => this.props.game.resourceSystem.resources\r\n            .filter(resource => resource.isUnlocked);\r\n\r\n        this.state = {resources: getResources()};\r\n\r\n        this.props.game.onUpdated.addSubscription(\r\n            this, \r\n            () => this.setState({resources: getResources()})\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n            <ul id=\"resource-list\">\r\n            {this.state.resources.map((resource) => \r\n                <UIResourceLine key={resource.name} resource={resource}></UIResourceLine>\r\n            )}\r\n            </ul>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { NumberFormatter } from \"../../../../common/NumberFormatter\";\r\nimport { Resource } from \"../../../../game/resources/Resource\";\r\n\r\nexport class UIResourceLine extends React.Component<{resource: Resource}> {\r\n    render() {\r\n        return (\r\n            <li className=\"resource-line\">\r\n                <span>\r\n                    <span className=\"name\">{this.props.resource.name}</span>\r\n                    <span className=\"increase-per-second\">({NumberFormatter.Format(this.props.resource.income.value, 2, 2)})</span>\r\n                </span>\r\n                <span className=\"amount\">{NumberFormatter.Format(this.props.resource.amount, 2, 2)}</span>\r\n            </li>\r\n        );\r\n    }\r\n}","export class NumberFormatter {\r\n    public static Format(number: number, maxDecimals?: number, minDecimals?: number, ceil?: boolean): string {\r\n        if (maxDecimals === undefined) {\r\n            maxDecimals = 2;\r\n        }\r\n        if (minDecimals === undefined) {\r\n            minDecimals = maxDecimals;\r\n        }\r\n        if (ceil === undefined) {\r\n            ceil = false;\r\n        }\r\n        const multiplier = Math.pow(10, maxDecimals);\r\n        let roundedNumber;\r\n        if (ceil) {\r\n            number -= 0.0001; // Floating point fix.\r\n            roundedNumber = Math.ceil(number * multiplier) / multiplier;\r\n        } else {\r\n            number += 0.0001; // Floating point fix.\r\n            roundedNumber = Math.floor(number * multiplier) / multiplier;\r\n        }\r\n        if (minDecimals) {\r\n            return roundedNumber.toFixed(minDecimals);\r\n        } else {\r\n            return roundedNumber.toString();\r\n        }\r\n    }\r\n}"],"sourceRoot":""}