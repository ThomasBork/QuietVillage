{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/common/Observable.ts","webpack:///./src/game/shared/ValueContainer.ts","webpack:///./src/game/shared/GameSystem.ts","webpack:///./src/game/resources/ResourceType.ts","webpack:///./src/game/resources/ResourceValue.ts","webpack:///./src/rendering/react/components/UIGameContext.tsx","webpack:///./src/common/NumberFormatter.ts","webpack:///./src/rendering/react/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/rendering/react/components/UIGame.tsx","webpack:///./src/game/Game.ts","webpack:///./src/common/ObservableSubscription.ts","webpack:///./src/game/resources/ResourceSystem.ts","webpack:///./src/game/resources/Resource.ts","webpack:///./src/game/workers/WorkerSystem.ts","webpack:///./src/game/workers/ResourceJob.ts","webpack:///./src/game/workers/Job.ts","webpack:///./src/game/buildings/BuildingSystem.ts","webpack:///./src/game/buildings/Building.ts","webpack:///./src/game/resources/ResourceValueContainerSet.ts","webpack:///./src/game/resources/ResourceValueContainer.ts","webpack:///./src/rendering/react/components/structure/UIHeader.tsx","webpack:///./src/rendering/react/components/structure/UIBody.tsx","webpack:///./src/rendering/react/components/workers/UIJobList.tsx","webpack:///./src/rendering/react/components/workers/UIJobLine.tsx","webpack:///./src/rendering/react/components/buildings/UIBuildings.tsx","webpack:///./src/rendering/react/components/buildings/UIBuilding.tsx","webpack:///./src/rendering/react/components/buildings/UIBuildingCost.tsx","webpack:///./src/rendering/react/components/shared/UIProgressBar.tsx","webpack:///./src/rendering/react/components/resources/UIResources.tsx","webpack:///./src/rendering/react/components/resources/UIResource.tsx","webpack:///./src/rendering/react/components/structure/UIGameSystemTabs.tsx","webpack:///./src/rendering/react/components/structure/UIGameSystemTab.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","ObservableFactory","subscriptions","observer","callback","subscription","ObservableSubscription","this","push","filter","args","forEach","apply","ValueModifier","amount","baseValue","additiveModifiers","multiplicativeModifiers","onValueChange","createWith1Argument","undefined","setAdditiveModifier","newValue","mod","notify","existingModifier","find","newModifier","recalculateValue","_isUnlocked","onUnlocked","dTime","ResourceType","ResourceValue","resourceType","resourceValueInput","map","input","GameContext","createContext","NumberFormatter","number","maxDecimals","minDecimals","ceil","amountOfTimesTheNumberCanBeDividedBy1000","multiplier","Math","pow","roundedNumber","numberString","floor","toFixed","toString","postfix","postfixes","ReactDOM","render","UIGame","document","getElementById","Component","props","super","state","game","newGame","Game","new","buildingSystem","addSubscription","forceUpdate","setState","UIHeader","versionNumber","onNewGameClick","Provider","UIBody","updateFrequency","maxTimeToResumePerUpdate","lastUpdateAsNumber","Date","now","onUpdate","init","startNewGame","BuildingSystem","resourceSystem","ResourceSystem","workerSystem","WorkerSystem","startTimeAsNumber","refreshSystemsIsUnlocked","refreshResourcesIsUnlocked","beginUpdating","updateIntervalID","setInterval","update","timeSinceLastUpdate","updateGameSystems","isUnlocked","totalWorkerCount","idleWorkerCount","GameSystem","resources","resourceMap","Map","resourceCaps","type","initialCap","Resource","addResourceType","Food","Wood","Stone","Pelt","Gold","Devotion","resource","set","dAmount","income","respectCap","resourceValues","every","resourceValue","getResource","ValueContainer","cap","hasCap","_","recalculateIdleWorkerCount","gathererJob","ResourceJob","woodcutterJob","resourceJobs","jobs","job","onWorkerCountChange","workerCount","resourceIncomeFromJob","onIdleWorkerCountChange","newCount","dWorkerCount","Job","description","incomePerSecond","_workerCount","buildings","baseCost","additiveCostPerBuilding","multiplicativeCostPerBuilding","baseTimeToBuild","additiveTimeToBuildPerBuilding","multiplicativeTimeToBuildPerBuilding","onUpdateAmount","Building","addBuilding","fromArray","thisBuilding","building","costOfNext","getAllAsResourceValues","hasResources","payResources","startBuilding","isBuildingNext","buildTimeRemaining","finishBuilding","ResourceValueContainerSet","timeToBuildNext","onBuildingStarted","refreshCostOfNextBuilding","refreshTimeToBuildNextBuilding","cost","newAmount","setMultiplicativeModifier","newAdditiveModifier","newMultiplicativeModifier","refreshNextBuilding","resourceValueContainers","val","ResourceValueContainer","resourceValueContainerMap","resourceValueContainer","findOrCreateResourceValueContainer","container","id","className","onClick","selectedGameSystem","UIBuildings","UIJobList","UIGameSystemTabs","onSelected","system","renderGameSystem","UIResources","UIJobLine","newWorkerCount","setWorkers","setWorkerCountOnJob","addWorker","removeWorker","UIBuilding","buyBuilding","getAmountText","src","toLocaleLowerCase","UIProgressBar","min","max","current","UIBuildingCost","buy","Consumer","getAll","Format","style","width","getFillPercentage","getResources","UIResource","allGameSystems","gameSystems","getUnlockedGameSystems","gameSystem","selectGameSystem","UIGameSystemTab","isSelected"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gBClFrDhC,EAAOD,QAAUkC,O,8ECAjB,cAkBA,MAAaC,EAGT,cAFQ,KAAAC,cAA0C,GAI3C,gBACH,OAAO,IAAID,EAER,6BACH,OAAO,IAAIA,EAER,8BACH,OAAO,IAAIA,EAGR,gBAAiBE,EAAkBC,GACtC,MAAMC,EAAe,IAAI,EAAAC,uBAAuBH,EAAUC,GAC1DG,KAAKL,cAAcM,KAAMH,GAGtB,mBAAoBF,GACvBI,KAAKL,cAAgBK,KAAKL,cAAcO,OAAOV,GAAKA,EAAEI,WAAaA,GAGhE,UAAWO,GACdH,KAAKL,cAAcS,QAAQN,GAAgBA,EAAaD,SAASQ,MAAMP,EAAaF,SAAUO,KAzBtG,uB,8EClBA,aAEA,MAAMG,EAIF,YAAatB,EAAUuB,GACnBP,KAAKO,OAASA,EACdP,KAAKhB,IAAMA,GAInB,uBAKI,YAAoBwB,GAJZ,KAAAC,kBAAqC,GACrC,KAAAC,wBAA2C,GAC5C,KAAAhC,MAAQ,EACR,KAAAiC,cAAiD,EAAAjB,kBAAkBkB,2BAEpDC,IAAdL,GACAR,KAAKc,oBAAoBd,KAAMQ,GAGhC,mBACH,IAAIO,EAAW,EACff,KAAKS,kBAAkBL,QAAQY,GAAOD,GAAYC,EAAIT,QACtDP,KAAKU,wBAAwBN,QAAQY,GAAOD,GAAYC,EAAIT,QACxDP,KAAKtB,QAAUqC,IACff,KAAKtB,MAAQqC,EACbf,KAAKW,cAAcM,OAAOF,IAG3B,oBAAqB/B,EAAUuB,GAClC,MAAMW,EAAmBlB,KAAKS,kBAAkBU,KAAKH,GAAOA,EAAIhC,MAAQA,GACxE,GAAIkC,EACAA,EAAiBX,OAASA,MACvB,CACH,MAAMa,EAAc,IAAId,EAActB,EAAKuB,GAC3CP,KAAKS,kBAAkBR,KAAKmB,GAEhCpB,KAAKqB,mBAEF,0BAA2BrC,EAAUuB,GACxC,MAAMW,EAAmBlB,KAAKU,wBAAwBS,KAAKH,GAAOA,EAAIhC,MAAQA,GAC9E,GAAIkC,EACAA,EAAiBX,OAASA,MACvB,CACH,MAAMa,EAAc,IAAId,EAActB,EAAKuB,GAC3CP,KAAKU,wBAAwBT,KAAKmB,GAEtCpB,KAAKqB,mBAEF,mBAAoBrC,GACvBgB,KAAKS,kBAAoBT,KAAKS,kBAAkBP,OAAOc,GAAOA,EAAIhC,MAAQA,GAC1EgB,KAAKU,wBAA0BV,KAAKU,wBAAwBR,OAAOc,GAAOA,EAAIhC,MAAQA,M,8ECrD9F,aAEA,iCACY,KAAAsC,aAAuB,EAUxB,KAAAC,WAAyB,EAAA7B,kBAAkBX,SATlD,iBAAmC,OAAOiB,KAAKsB,YAC/C,eAAsB5C,GACdsB,KAAKsB,cAAgB5C,IACrBsB,KAAKsB,YAAc5C,EACfA,GACAsB,KAAKuB,WAAWN,UAKrB,OAAOO,IACP,W,8ECfX,SAAYC,GACR,2BACA,mBACA,mBACA,mBACA,qBACA,mBANJ,CAAY,EAAAA,eAAA,EAAAA,aAAY,M,8ECExB,MAAaC,EAGT,YAAoBC,EAA4BjD,GAC5CsB,KAAK2B,aAAeA,EACpB3B,KAAKtB,MAAQA,EAEV,oBAAoBkD,GACvB,OAAOA,EAAmBC,IAAIC,GAAS,IAAIJ,EAAcI,EAAM,GAAIA,EAAM,MARjF,mB,8ECFA,aAGa,EAAAC,YAActC,EAAMuC,cAAoB,O,8ECHrD,MAAaC,EAEF,cAAcC,EAAgBC,EAAsBC,EAAsBC,QACzDxB,IAAhBsB,IACAA,EAAc,QAEEtB,IAAhBuB,IACAA,EAAcD,QAELtB,IAATwB,IACAA,GAAO,GAGX,IAAIC,EAA2C,EAC/C,KAAMJ,EAAS,KACXA,GAAU,IACVI,IAGJ,MAAMC,EAAaC,KAAKC,IAAI,GAAIN,GAChC,IAAIO,EASAC,EARAN,GACAH,GAAU,KACVQ,EAAgBF,KAAKH,KAAKH,EAASK,GAAcA,IAEjDL,GAAU,KACVQ,EAAgBF,KAAKI,MAAMV,EAASK,GAAcA,GAKlDI,EADAP,EACeM,EAAcG,QAAQT,GAEtBM,EAAcI,WAGjC,MAAMC,EAAUd,EAAgBe,UAAUV,GAI1C,OAHIS,IACAJ,GAAgBI,GAEbJ,GAxCf,oBACkB,EAAAK,UAAY,CAAC,GAAI,IAAK,IAAK,M,8ECD7C,aACA,OAEA,QAEAC,EAASC,OACL,gBAAC,EAAAC,OAAM,MACPC,SAASC,eAAe,oB,cCP5B7F,EAAOD,QAAU0F,U,8ECAjB,aACA,QAGA,OAEA,QACA,QAEA,MAAaE,UAAe1D,EAAM6D,UAC9B,YAAaC,GACTC,MAAMD,GAENvD,KAAKyD,MAAQ,CAACC,KAAM,MAExB,UACI,MAAMC,EAAU,EAAAC,KAAKC,MACrBF,EAAQG,eAAevC,WAAWwC,gBAAgB/D,KAAM,IAAMA,KAAKgE,eACnEhE,KAAKiE,SAAS,CAACP,KAAMC,IAEzB,SACI,OACI,2BACI,gBAAC,EAAAO,SAAQ,CAACC,cAAe,QAASC,eAAgB,IAAIpE,KAAK2D,YAEvD3D,KAAKyD,MAAMC,KAEX,gBAAC,EAAA3B,YAAYsC,SAAQ,CAAC3F,MAAOsB,KAAKyD,MAAMC,MACpC,gBAAC,EAAAY,OAAM,CAACZ,KAAM1D,KAAKyD,MAAMC,QAE3B,OArBtB,Y,8ECTA,aACA,QACA,QACA,QAEA,MAAaE,EAsBT,cArBQ,KAAAW,gBAA0B,IAC1B,KAAAC,yBAAmC,MAGnC,KAAAC,mBAA6BC,KAAKC,MAQnC,KAAAC,SAAuB,EAAAlF,kBAAkBX,SAEzC,aACH,MAAM2E,EAAO,IAAIE,EAGjB,OAFAF,EAAKmB,OACLnB,EAAKoB,eACEpB,EAKJ,OACH1D,KAAK8D,eAAiB,IAAI,EAAAiB,eAAe/E,MACzCA,KAAK8D,eAAee,OAEpB7E,KAAKgF,eAAiB,IAAI,EAAAC,eAC1BjF,KAAKgF,eAAeH,OAEpB7E,KAAKkF,aAAe,IAAI,EAAAC,aAAanF,MACrCA,KAAKkF,aAAaL,OAGf,eACH7E,KAAKoF,kBAAoBV,KAAKC,MAC9B3E,KAAKkF,aAAavB,UAClB3D,KAAKqF,2BACLrF,KAAKgF,eAAeM,6BACpBtF,KAAKuF,gBAGD,gBACJvF,KAAKwF,iBAAmBC,YAAY,KAChCzF,KAAK0F,UACN1F,KAAKuE,iBAGJ,SACJ,IAAIoB,EAAsBjB,KAAKC,MAAQ3E,KAAKyE,mBAS5C,IANIkB,EAAsB3F,KAAKwE,2BAC3BmB,EAAsB3F,KAAKwE,yBAC3BxE,KAAKyE,mBAAqBC,KAAKC,MAAQ3E,KAAKwE,0BAIzCmB,EAAsB3F,KAAKuE,iBAC9BoB,GAAuB3F,KAAKuE,gBAC5BvE,KAAKyE,mBAAqBzE,KAAKyE,mBAAqBzE,KAAKuE,gBAEzDvE,KAAK4F,kBAAkB5F,KAAKuE,iBAGhCvE,KAAK4E,SAAS3D,SAGV,kBAAmBO,GACvBxB,KAAKgF,eAAeU,OAAOlE,GAC3BxB,KAAK8D,eAAe4B,OAAOlE,GAGvB,2BACJxB,KAAKkF,aAAaW,YAAa,EAC/B7F,KAAKgF,eAAea,YAAa,EACjC7F,KAAK8D,eAAe+B,WAAa7F,KAAKkF,aAAaY,iBAAiBpH,MAAQ,GAA2C,IAAtCsB,KAAKkF,aAAaa,iBA7E3G,U,8ECLA,+BAGI,YAAoBnG,EAAkBC,GAClCG,KAAKJ,SAAWA,EAChBI,KAAKH,SAAWA,K,8ECLxB,aACA,QACA,OAIA,MAAaoF,UAAuB,EAAAe,WAApC,c,oBACW,KAAAhI,KAAe,YACf,KAAAiI,UAAwB,GACxB,KAAAC,YAA2C,IAAIC,IAC/C,KAAAC,aAAyC,GACxC,gBAAgBpI,EAAcqI,EAAoBC,GACtDtG,KAAKiG,UAAUhG,KAAK,IAAI,EAAAsG,SAASvI,EAAMqI,EAAMC,IAE1C,OACHtG,KAAKwG,gBAAgB,OAAQ,EAAA/E,aAAagF,KAAM,KAChDzG,KAAKwG,gBAAgB,OAAQ,EAAA/E,aAAaiF,KAAM,KAChD1G,KAAKwG,gBAAgB,QAAS,EAAA/E,aAAakF,MAAO,KAClD3G,KAAKwG,gBAAgB,OAAQ,EAAA/E,aAAamF,KAAM,KAChD5G,KAAKwG,gBAAgB,OAAQ,EAAA/E,aAAaoF,KAAM,KAChD7G,KAAKwG,gBAAgB,WAAY,EAAA/E,aAAaqF,UAE9C9G,KAAKiG,UAAU7F,QAAQ2G,GAAY/G,KAAKkG,YAAYc,IAAID,EAASV,KAAMU,IAEpE,YAAYV,GACf,OAAOrG,KAAKkG,YAAY5H,IAAI+H,GAEzB,OAAO7E,GACVxB,KAAKiG,UAAU7F,QAAQ2G,IACnB,MAAME,EAAUF,EAASG,OAAOxI,MAAQ8C,EAAQ,IAChDuF,EAASxG,QAAU0G,EACnBF,EAASI,eAGV,aAAaC,GAChB,OAAOA,EAAeC,MAAMC,IAExB,OADiBtH,KAAKuH,YAAYD,EAAc3F,cAChCpB,QAAU+G,EAAc5I,QAGzC,aAAa0I,GAChB,OAAOA,EAAehH,QAAQkH,IACTtH,KAAKuH,YAAYD,EAAc3F,cACvCpB,QAAU+G,EAAc5I,QAGlC,6BACHsB,KAAKkG,YAAY5H,IAAI,EAAAmD,aAAagF,MAAMZ,YAAa,EACrD7F,KAAKkG,YAAY5H,IAAI,EAAAmD,aAAaiF,MAAMb,YAAa,GA1C7D,oB,8ECNA,aAEA,OAEA,iBAkBI,YAAmB7H,EAAcqI,EAAoBC,GAjB7C,KAAAhF,aAAuB,EAUxB,KAAAC,WAAyB,EAAA7B,kBAAkBX,SAC3C,KAAAwB,OAAiB,EACjB,KAAA2G,OAAyB,IAAI,EAAAM,eAC7B,KAAAC,IAAsB,IAAI,EAAAD,eAK7BxH,KAAKhC,KAAOA,EACZgC,KAAKqG,KAAOA,OACOxF,IAAfyF,EACAtG,KAAK0H,QAAS,GAEd1H,KAAK0H,QAAS,EACd1H,KAAKyH,IAAI3G,oBAAoBd,KAAMsG,IAvB3C,iBAAmC,OAAOtG,KAAKsB,YAC/C,eAAsB5C,GACdsB,KAAKsB,cAAgB5C,IACrBsB,KAAKsB,YAAc5C,EACfA,GACAsB,KAAKuB,WAAWN,UAsBrB,aACCjB,KAAK0H,QAAU1H,KAAKO,OAASP,KAAKyH,IAAI/I,QACtCsB,KAAKO,OAASP,KAAKyH,IAAI/I,U,8ECnCnC,aACA,OACA,QACA,OAGA,OAEA,MAAayG,UAAqB,EAAAa,WAc9B,YAAoBtC,GAChBF,QAZG,KAAAxF,KAAe,UAalBgC,KAAK0D,KAAOA,EAGT,OACH1D,KAAK8F,iBAAmB,IAAI,EAAA0B,eAC5BxH,KAAK8F,iBAAiBhF,oBAAoBd,KAAM,GAChDA,KAAK8F,iBAAiBnF,cAAcoD,gBAAgB/D,KAAM2H,GAAK3H,KAAK4H,8BAEpE5H,KAAK6H,YAAc,IAAI,EAAAC,YAAY,WAAY,gDAAiD,GAAK,EAAArG,aAAagF,MAClHzG,KAAK+H,cAAgB,IAAI,EAAAD,YAAY,aAAc,2BAA4B,GAAI,EAAArG,aAAaiF,MAChG1G,KAAKgI,aAAe,CAChBhI,KAAK6H,YACL7H,KAAK+H,eAGT/H,KAAKiI,KAAO,IAAIjI,KAAKgI,cAGrBhI,KAAKgI,aAAa5H,QAAQ8H,IACtB,MAAMnB,EAAW/G,KAAK0D,KAAKsB,eAAeuC,YAAYW,EAAIvG,cAC1DuG,EAAIC,oBAAoBpE,gBAAgB/D,KAAOoI,IAC3C,MAAMC,EAAwBD,EAAcF,EAAIxJ,MAAMA,MACtDqI,EAASG,OAAOpG,oBAAoBoH,EAAKG,OAIjDrI,KAAKsI,wBAA0B,EAAA5I,kBAAkBkB,sBAG9C,UACHZ,KAAK4H,6BAGF,6BACH,IAAIW,EAAWvI,KAAK8F,iBAAiBpH,MACrCsB,KAAKiI,KAAK7H,QAAQ8H,GAAOK,GAAYL,EAAIE,aACrCpI,KAAK+F,kBAAoBwC,IACzBvI,KAAK+F,gBAAkBwC,EACvBvI,KAAKsI,wBAAwBrH,OAAOjB,KAAK+F,kBAI1C,oBAAoBmC,EAAUE,GACjC,MAAMI,EAAeJ,EAAcF,EAAIE,YACvC,GAAII,EAAe,EAAG,CAClB,KAAIxI,KAAK+F,iBAAmByC,GAGxB,KAAM,iBAAiBA,oBAA+BxI,KAAK+F,qCAF3DmC,EAAIE,aAAeI,MAIpB,CACH,KAAIJ,GAAe,GAGf,KAAM,sDAFNF,EAAIE,aAAeI,EAK3BxI,KAAK0D,KAAKI,eAAe+B,YAAa,EACtC7F,KAAK4H,8BA1Eb,kB,8ECPA,cAEA,MAAaE,UAAoB,EAAAW,IAG7B,YAAmBzK,EAAc0K,EAAqBC,EAAyBhH,GAC3E6B,MAAMxF,EAAM0K,EAAaC,GACzB3I,KAAK2B,aAAeA,GAL5B,iB,8ECHA,aACA,OAEA,YACI,YAAa3D,EAAc0K,EAAqBhK,GAC5CsB,KAAK4I,aAAe,EAEpB5I,KAAKhC,KAAOA,EACZgC,KAAK0I,YAAcA,EACnB1I,KAAKtB,MAAQ,IAAI,EAAA8I,eACjBxH,KAAKtB,MAAMoC,oBAAoBd,KAAMtB,GACrCsB,KAAKmI,oBAAsB,EAAAzI,kBAAkBkB,sBAQjD,kBACI,OAAOZ,KAAK4I,aAEhB,gBAAuBlK,GACnBsB,KAAK4I,aAAelK,EACpBsB,KAAKmI,oBAAoBlH,OAAOvC,M,8ECxBxC,aACA,QAEA,OAEA,OAEA,MAAaqG,UAAuB,EAAAiB,WAIhC,YAAmBtC,GACfF,QAHG,KAAAxF,KAAe,YACf,KAAA6K,UAAwB,GAG3B7I,KAAK0D,KAAOA,EAER,YACJ1F,EACA0K,EACAI,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEApJ,KAAK6I,UAAU5I,KACX,IAAI,EAAAoJ,SACArL,EACA0K,EACAI,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,IAEL,OACHpJ,KAAKsJ,YACD,MACA,6CACA,EAAA5H,cAAc6H,UAAU,CAAC,EAAA9H,aAAaiF,KAAM,MAC5C,EAAAhF,cAAc6H,UAAU,CAAC,EAAA9H,aAAaiF,KAAM,KAC5C,EAAAhF,cAAc6H,UAAU,CAAC,EAAA9H,aAAaiF,KAAM,MAC5C,IACA,IACA,KACC8C,IACCxJ,KAAK0D,KAAKwB,aAAaY,iBAAiBhF,oBAAoB0I,EAAcA,EAAajJ,UAI1F,YAAYkJ,GACf,MAAMC,EAAaD,EAASC,WAAWC,yBACnC3J,KAAK0D,KAAKsB,eAAe4E,aAAaF,KACtC1J,KAAK0D,KAAKsB,eAAe6E,aAAaH,GACtCD,EAASK,iBAGV,OAAOtI,GACVxB,KAAK6I,UAAUzI,QAAQqJ,IACfA,EAASM,iBACTN,EAASO,oBAAsBxI,EAC3BiI,EAASO,oBAAsB,GAC/BP,EAASQ,qBA1D7B,oB,8ECNA,aAEA,QACA,OAEA,iBAcI,YACIjM,EACA0K,EACAI,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAVG,KAAAW,gBAA0B,EAY7B/J,KAAKO,OAAS,EACdP,KAAKhC,KAAOA,EACZgC,KAAK0I,YAAcA,EACnB1I,KAAK0J,WAAa,IAAI,EAAAQ,0BAA0BpB,GAChD9I,KAAKmK,gBAAkB,IAAI,EAAA3C,eAAeyB,GAE1CjJ,KAAK+I,wBAA0BA,EAC/B/I,KAAKgJ,8BAAgCA,EACrChJ,KAAKkJ,+BAAiCA,EACtClJ,KAAKmJ,qCAAuCA,EAE5CnJ,KAAKoJ,eAAiB,EAAA1J,kBAAkBkB,sBACxCZ,KAAKoJ,eAAerF,gBAAgB/D,KAAMoJ,GAE1CpJ,KAAKoK,kBAAoB,EAAA1K,kBAAkBkB,sBAEvC,sBACJZ,KAAKqK,4BACLrK,KAAKsK,iCAED,4BACJtK,KAAK+I,wBAAwB3I,QAAQmK,IACjC,MAAMC,EAAYD,EAAK7L,MAAQsB,KAAKO,OACpCP,KAAK0J,WAAW5I,oBAAoBd,KAAMuK,EAAK5I,aAAc6I,KAGjExK,KAAKgJ,8BAA8B5I,QAAQmK,IACvC,MAAMC,EAAYhI,KAAKC,IAAI8H,EAAK7L,MAAOsB,KAAKO,QAC5CP,KAAK0J,WAAWe,0BAA0BzK,KAAMuK,EAAK5I,aAAc6I,KAGnE,iCACJ,GAAIxK,KAAKkJ,+BAAgC,CACrC,MAAMwB,EAAsB1K,KAAKkJ,+BAAiClJ,KAAKO,OACvEP,KAAKmK,gBAAgBrJ,oBAAoBd,KAAM0K,GAEnD,GAAI1K,KAAKmJ,qCAAsC,CAC3C,MAAMwB,EAA4BnI,KAAKC,IAAIzC,KAAKmJ,qCAAsCnJ,KAAKO,QAC3FP,KAAKmK,gBAAgBM,0BAA0BzK,KAAM2K,IAGtD,gBACH3K,KAAK+J,gBAAiB,EACtB/J,KAAKgK,mBAAqBhK,KAAKmK,gBAAgBzL,MAC/CsB,KAAKoK,kBAAkBnJ,OAAOjB,MAE3B,iBACHA,KAAKO,SACLP,KAAK+J,gBAAiB,EACtB/J,KAAK4K,sBACL5K,KAAKoJ,eAAenI,OAAOjB,S,8ECjFnC,cAEA,OAEA,kCAGI,YAAoBoH,GAChBpH,KAAK6K,wBAA0BzD,EAAevF,IAAIiJ,GAAO,IAAI,EAAAC,uBAAuBD,EAAInJ,aAAcmJ,EAAIpM,QAC1GsB,KAAKgL,0BAA4B,IAAI7E,IACrCnG,KAAK6K,wBAAwBzK,QAAQ0K,GAAO9K,KAAKgL,0BAA0BhE,IAAI8D,EAAInJ,aAAcmJ,IAE7F,mCAAmCnJ,GACvC,IAAIsJ,EAAyBjL,KAAKgL,0BAA0B1M,IAAIqD,GAMhE,OALKsJ,IACDA,EAAyB,IAAI,EAAAF,uBAAuBpJ,GACpD3B,KAAK6K,wBAAwB5K,KAAKgL,GAClCjL,KAAKgL,0BAA0BhE,IAAIrF,EAAcsJ,IAE9CA,EAEJ,oBAAqBjM,EAAU2C,EAA4BpB,GAC/BP,KAAKkL,mCAAmCvJ,GAChDjD,MAAMoC,oBAAoB9B,EAAKuB,GAEnD,0BAA2BvB,EAAU2C,EAA4BpB,GACrCP,KAAKkL,mCAAmCvJ,GAChDjD,MAAM+L,0BAA0BzL,EAAKuB,GAEzD,SACH,OAAOP,KAAK6K,wBAET,cACH,OAAO7K,KAAKgL,0BAET,yBACH,OAAOhL,KAAK6K,wBAAwBhJ,IAAIsJ,GAAa,IAAI,EAAAzJ,cAAcyJ,EAAUxJ,aAAcwJ,EAAUzM,MAAMA,W,8ECnCvH,aAEA,+BAGI,YAAoBiD,EAA4BnB,GAC5CR,KAAK2B,aAAeA,EACpB3B,KAAKtB,MAAQ,IAAI,EAAA8I,eAAehH,M,8ECRxC,aAEA,MAAa0D,UAAiBzE,EAAM6D,UACzB,SACH,OACI,uBAAK8H,GAAG,UACJ,wBAAMC,UAAU,mBACZ,wBAAMA,UAAU,SAAO,iBACvB,wBAAMA,UAAU,kB,IAAmBrL,KAAKuD,MAAMY,gBAElD,wBAAMkH,UAAU,sBAAsBC,QAAStL,KAAKuD,MAAMa,gBAAc,cARxF,c,8ECFA,aAEA,QACA,QACA,QACA,QAGA,MAAaE,UAAe7E,EAAM6D,UAKtB,mBACJ,IAAKtD,KAAKyD,QAAUzD,KAAKyD,MAAM8H,qBAAuBvL,KAAKyD,MAAM8H,mBAAmB1F,WAChF,OAAO,KAGX,OAAO7F,KAAKyD,MAAM8H,oBACd,KAAKvL,KAAKuD,MAAMG,KAAKI,eACjB,OAAO,gBAAC,EAAA0H,YAAW,CAAC9H,KAAM1D,KAAKuD,MAAMG,OACzC,KAAK1D,KAAKuD,MAAMG,KAAKwB,aACjB,OAAO,gBAAC,EAAAuG,UAAS,CAAC/H,KAAM1D,KAAKuD,MAAMG,OACvC,QACI,OAAO,MAGZ,SACH,OACI,uBAAK0H,GAAG,QACJ,wBAAMA,GAAG,kCACL,gBAAC,EAAAM,iBAAgB,CACbhI,KAAM1D,KAAKuD,MAAMG,KACjBiI,WAAaC,GAAqB5L,KAAKiE,SAAS,CAACsH,mBAAmBK,MAExE,wBAAMR,GAAG,eACJpL,KAAK6L,qBAGd,gBAAC,EAAAC,YAAW,CAACpI,KAAM1D,KAAKuD,MAAMG,SA/B9C,Y,8ECRA,aACA,QAGA,MAAa+H,UAAkBhM,EAAM6D,UACjC,YAAaC,GACTC,MAAMD,GAEV,SACI,OACI,0BACCvD,KAAKuD,MAAMG,KAAKwB,aAAa+C,KAAKpG,IAAKqG,GACpC,gBAAC,EAAA6D,UAAS,CAAC/M,IAAKkJ,EAAIlK,KAAM0F,KAAM1D,KAAKuD,MAAMG,KAAMwE,IAAKA,OARtE,e,8ECJA,aAQA,MAAa6D,UAAkBtM,EAAM6D,UACjC,YAAoBC,GAChBC,MAAMD,GAENvD,KAAKyD,MAAQ,CACTzF,KAAMgC,KAAKuD,MAAM2E,IAAIlK,KACrBoK,YAAapI,KAAKuD,MAAM2E,IAAIE,aAGhCpI,KAAKuD,MAAM2E,IAAIC,oBAAoBpE,gBAC/B/D,KACCgM,GACGhM,KAAKiE,SAAS,CAACmE,YAAa4D,KAEhC,YACJ,MAAMA,EAAiBhM,KAAKuD,MAAM2E,IAAIE,YAAc,EACpDpI,KAAKiM,WAAWD,GAEZ,eACJ,MAAMA,EAAiBhM,KAAKuD,MAAM2E,IAAIE,YAAc,EACpDpI,KAAKiM,WAAWD,GAEZ,WAAWA,GACfhM,KAAKuD,MAAMG,KAAKwB,aAAagH,oBAAoBlM,KAAKuD,MAAM2E,IAAK8D,GAE9D,SACH,OACI,sBAAIhN,IAAKgB,KAAKyD,MAAMzF,MAChB,4BAAOgC,KAAKyD,MAAMzF,MAClB,4BAAOgC,KAAKyD,MAAM2E,aAClB,yBAAO/B,KAAK,SAASiF,QAAS,IAAItL,KAAKmM,YAAazN,MAAM,QAC1D,yBAAO2H,KAAK,SAASiF,QAAS,IAAItL,KAAKoM,eAAgB1N,MAAM,aA/B7E,e,8ECRA,aAEA,QAEA,MAAa8M,UAAoB/L,EAAM6D,UACnC,YAAaC,GACTC,MAAMD,GAEV,SACI,OACI,0BACCvD,KAAKuD,MAAMG,KAAKI,eAAe+E,UAAUhH,IAAK4H,GAC3C,gBAAC,EAAA4C,WAAU,CACPrN,IAAKyK,EAASzL,KACd0F,KAAM1D,KAAKuD,MAAMG,KACjB+F,SAAUA,OAX9B,iB,8ECJA,aAGA,QACA,QAMA,MAAa4C,UAAmB5M,EAAM6D,UAClC,YAAoBC,GAChBC,MAAMD,GAENvD,KAAKuD,MAAMkG,SAASL,eAAerF,gBAC/B/D,KACCwJ,GAA2BxJ,KAAKgE,eAGrChE,KAAKuD,MAAMG,KAAKkB,SAASb,gBAAgB/D,KAAM,IAAMA,KAAKgE,eAEtD,MACJhE,KAAKuD,MAAMG,KAAKI,eAAewI,YAAYtM,KAAKuD,MAAMkG,UAElD,gBACJ,OAAOzJ,KAAKuD,MAAMkG,SAASlJ,OAAS,EAAI,IAAMP,KAAKuD,MAAMkG,SAASlJ,OAAS,IAAM,GAE9E,SACH,OACI,sBAAIvB,IAAKgB,KAAKuD,MAAMkG,SAASzL,KAAMqN,UAAU,YACzC,wBAAMA,UAAU,4BACZ,wBAAMA,UAAU,QAAQrL,KAAKuD,MAAMkG,SAASzL,KAAOgC,KAAKuM,iBACxD,uBAAKC,IAAK,mBAAmBxM,KAAKuD,MAAMkG,SAASzL,KAAKyO,6BAE1D,wBAAMpB,UAAU,yBACXrL,KAAKuD,MAAMkG,SAASM,gBACjB,gBAAC,EAAA2C,cAAa,CAACC,IAAK,EAAGC,IAAK5M,KAAKuD,MAAMkG,SAASU,gBAAgBzL,MAAOmO,QAAS7M,KAAKuD,MAAMkG,SAASO,qBAExG,wBAAMqB,UAAU,eAAerL,KAAKuD,MAAMkG,SAASf,cAEvD,gBAAC,EAAAoE,eAAc,CAACxB,QAAS,IAAMtL,KAAK+M,MAAOtD,SAAUzJ,KAAKuD,MAAMkG,aA9BhF,gB,8ECVA,aAEA,OACA,OAEA,MAAaqD,UAAuBrN,EAAM6D,UACtC,YAAoBC,GAChBC,MAAMD,GAENvD,KAAKuD,MAAMkG,SAASL,eAAerF,gBAC/B/D,KACCwJ,GACGxJ,KAAKgE,eAGV,SACH,OACI,gBAAC,EAAAjC,YAAYiL,SAAQ,KACpBtJ,GACG,sBAAI2H,UAAU,YAAYC,QAAStL,KAAKuD,MAAM+H,SACzCtL,KAAKuD,MAAMkG,SAASC,WAAWuD,SAASpL,IAAIyF,GACzC,sBAAI+D,UAAU,WAAWrM,IAAKsI,EAAc3F,cACxC,wBAAM0J,UAAU,QAAQ3H,EAAKsB,eAAeuC,YAAYD,EAAc3F,cAAc3D,MACpF,wBAAMqN,UAAU,SAAS,EAAApJ,gBAAgBiL,OAAO5F,EAAc5I,MAAMA,MAAO,EAAG,GAAG,SAlB7G,oB,8ECLA,aAEA,MAAagO,UAAsBjN,EAAM6D,UAC7B,oBACJ,OAAO,KAAOtD,KAAKuD,MAAMqJ,IAAM5M,KAAKuD,MAAMsJ,UAAY7M,KAAKuD,MAAMqJ,IAAM5M,KAAKuD,MAAMoJ,KAE/E,SACH,OACI,wBAAMtB,UAAU,gBACZ,wBAAMA,UAAU,MAAM8B,MAAO,CAACC,MAAOpN,KAAKqN,oBAAsB,SAPhF,mB,8ECFA,aAEA,QAGA,MAAavB,UAAoBrM,EAAM6D,UACnC,YAAaC,GACTC,MAAMD,GAEN,MAAM+J,EAAe,IAAMtN,KAAKuD,MAAMG,KAAKsB,eAAeiB,UACrD/F,OAAO6G,GAAYA,EAASlB,YAEjC7F,KAAKyD,MAAQ,CAACwC,UAAWqH,KAEzBtN,KAAKuD,MAAMG,KAAKkB,SAASb,gBACrB/D,KACA,IAAMA,KAAKiE,SAAS,CAACgC,UAAWqH,OAGxC,SACI,OACI,sBAAIlC,GAAG,iBACNpL,KAAKyD,MAAMwC,UAAUpE,IAAKkF,GACvB,gBAAC,EAAAwG,WAAU,CAACvO,IAAK+H,EAAS/I,KAAM+I,SAAUA,OAlB1D,iB,8ECLA,aACA,OAGA,MAAawG,UAAmB9N,EAAM6D,UAClC,SACI,OACI,sBAAI+H,UAAU,iBACV,4BACI,wBAAMA,UAAU,QAAQrL,KAAKuD,MAAMwD,SAAS/I,MAC5C,wBAAMqN,UAAU,uB,IAAwB,EAAApJ,gBAAgBiL,OAAOlN,KAAKuD,MAAMwD,SAASG,OAAOxI,MAAO,EAAG,G,QAExG,4BACI,wBAAM2M,UAAU,UAAU,EAAApJ,gBAAgBiL,OAAOlN,KAAKuD,MAAMwD,SAASxG,OAAQ,EAAG,IAE5EP,KAAKuD,MAAMwD,SAASW,OAClB,4B,MAAU,EAAAzF,gBAAgBiL,OAAOlN,KAAKuD,MAAMwD,SAASU,IAAI/I,MAAO,EAAG,IACnE,QAb1B,gB,8ECJA,aAGA,QAEA,MAAagN,UAAyBjM,EAAM6D,UAIxC,YAAmBC,GACfC,MAAMD,GAENvD,KAAKwN,eAAiB,CAClBjK,EAAMG,KAAKwB,aACX3B,EAAMG,KAAKI,gBAGf9D,KAAKwN,eAAepN,QAAQwL,GAAUA,EAAOrK,WAAWwC,gBAAgB/D,KAAM,IAAMA,KAAK4F,sBAEzF5F,KAAKyN,YAAczN,KAAK0N,yBAEpB,yBACJ,OAAO1N,KAAKwN,eAAetN,OAAO0L,GAAUA,EAAO/F,YAE/C,oBACJ7F,KAAKyN,YAAczN,KAAKwN,eAAetN,OAAO0L,GAAUA,EAAO/F,YAC/D7F,KAAKgE,cAED,iBAAiB2J,GACrB3N,KAAKuL,mBAAqBoC,EAC1B3N,KAAKuD,MAAMoI,WAAWgC,GACtB3N,KAAKgE,cAEF,oBACHhE,KAAK4N,iBAAiB5N,KAAKuD,MAAMG,KAAKwB,cAEnC,SACH,OACI,sBAAIkG,GAAG,QACFpL,KAAKyN,YAAY5L,IAAI+J,GAClB,gBAAC,EAAAiC,gBAAe,CACZ7O,IAAK4M,EAAO5N,KACZ2P,WAAY/B,EACZkC,WAAYlC,IAAW5L,KAAKuL,mBAC5BI,WAAY,IAAI3L,KAAK4N,iBAAiBhC,QAvC9D,sB,8ECLA,aAGA,MAAaiC,UAAwBpO,EAAM6D,UAChC,SACH,OACI,sBAAI+H,UAAW,OAAOrL,KAAKuD,MAAMuK,WAAa,WAAa,KAAMxC,QAAStL,KAAKuD,MAAMoI,YACjF,uBAAKa,IAAK,cAAcxM,KAAKuD,MAAMoK,WAAW3P,KAAKyO,4BACnD,4BAAOzM,KAAKuD,MAAMoK,WAAW3P,QAL7C","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","module.exports = React;","import { ObservableSubscription } from \"./ObservableSubscription\";\r\n\r\nexport interface Observable {\r\n    addSubscription(observer: object, callback: () => void): void;\r\n    removeSubscription(observer: object): void;\r\n    notify(): void;\r\n}\r\nexport interface ObservableWith1Argument<T0> {\r\n    addSubscription(observer: object, callback: (p0: T0) => void): void;\r\n    removeSubscription(observer: object): void;\r\n    notify(p0: T0): void;\r\n}\r\nexport interface ObservableWith2Arguments<T0, T1> {\r\n    addSubscription(observer: object, callback: (p0: T0, p1: T1) => void): void;\r\n    removeSubscription(observer: object): void;\r\n    notify(p0: T0, p1: T1): void;\r\n}\r\n\r\nexport class ObservableFactory {\r\n    private subscriptions: ObservableSubscription[] = [];\r\n\r\n    private constructor() {}\r\n\r\n    public static create(): Observable {\r\n        return new ObservableFactory();\r\n    } \r\n    public static createWith1Argument<T0>(): ObservableWith1Argument<T0> {\r\n        return new ObservableFactory();\r\n    } \r\n    public static createWith2Arguments<T0, T1>(): ObservableWith2Arguments<T0, T1> {\r\n        return new ObservableFactory();\r\n    }\r\n\r\n    public addSubscription (observer: object, callback: (...args: any[]) => void): void {\r\n        const subscription = new ObservableSubscription(observer, callback);\r\n        this.subscriptions.push (subscription);\r\n    }\r\n\r\n    public removeSubscription (observer: object): void {\r\n        this.subscriptions = this.subscriptions.filter(s => s.observer !== observer);\r\n    }\r\n\r\n    public notify (...args: any[]): void {\r\n        this.subscriptions.forEach(subscription => subscription.callback.apply(subscription.observer, args));\r\n    }\r\n}","import { ObservableWith1Argument, ObservableFactory } from \"../../common/Observable\";\r\n\r\nclass ValueModifier {\r\n    public amount: number;\r\n    public key: any;\r\n\r\n    constructor (key: any, amount: number) {\r\n        this.amount = amount;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\nexport class ValueContainer {\r\n    private additiveModifiers: ValueModifier[] = [];\r\n    private multiplicativeModifiers: ValueModifier[] = [];\r\n    public value = 0;\r\n    public onValueChange: ObservableWith1Argument<number> = ObservableFactory.createWith1Argument<number>();\r\n    public constructor (baseValue?: number) {\r\n        if (baseValue !== undefined) {\r\n            this.setAdditiveModifier(this, baseValue);\r\n        }\r\n    }\r\n    public recalculateValue (): void {\r\n        let newValue = 0;\r\n        this.additiveModifiers.forEach(mod => newValue += mod.amount);\r\n        this.multiplicativeModifiers.forEach(mod => newValue *= mod.amount);\r\n        if (this.value !== newValue) {\r\n            this.value = newValue;\r\n            this.onValueChange.notify(newValue);\r\n        }\r\n    }\r\n    public setAdditiveModifier (key: any, amount: number) {\r\n        const existingModifier = this.additiveModifiers.find(mod => mod.key === key);\r\n        if (existingModifier) {\r\n            existingModifier.amount = amount;\r\n        } else {\r\n            const newModifier = new ValueModifier(key, amount);\r\n            this.additiveModifiers.push(newModifier);\r\n        }\r\n        this.recalculateValue();\r\n    }\r\n    public setMultiplicativeModifier (key: any, amount: number) {\r\n        const existingModifier = this.multiplicativeModifiers.find(mod => mod.key === key);\r\n        if (existingModifier) {\r\n            existingModifier.amount = amount;\r\n        } else {\r\n            const newModifier = new ValueModifier(key, amount);\r\n            this.multiplicativeModifiers.push(newModifier);\r\n        }\r\n        this.recalculateValue();\r\n    }\r\n    public removeAllModifiers (key: any): void {\r\n        this.additiveModifiers = this.additiveModifiers.filter(mod => mod.key !== key);\r\n        this.multiplicativeModifiers = this.multiplicativeModifiers.filter(mod => mod.key !== key);\r\n    }\r\n}\r\n","import { Observable, ObservableFactory } from \"../../common/Observable\";\r\n\r\nexport abstract class GameSystem {\r\n    private _isUnlocked: boolean = false;\r\n    public get isUnlocked(): boolean { return this._isUnlocked; };\r\n    public set isUnlocked(value) { \r\n        if (this._isUnlocked !== value) {\r\n            this._isUnlocked = value;\r\n            if (value) {\r\n                this.onUnlocked.notify();\r\n            }\r\n        }\r\n    };\r\n    public onUnlocked: Observable = ObservableFactory.create();\r\n    public update(dTime: number): void {}\r\n    public init(): void {}\r\n    public abstract name: string;\r\n}\r\n","export enum ResourceType {\r\n    Devotion,\r\n    Food,\r\n    Gold,\r\n    Pelt,\r\n    Stone,\r\n    Wood\r\n}","import { ResourceType } from \"./ResourceType\";\r\n\r\nexport class ResourceValue {\r\n    public resourceType: ResourceType;\r\n    public value: number;\r\n    public constructor (resourceType: ResourceType, value: number) {\r\n        this.resourceType = resourceType;\r\n        this.value = value;\r\n    }\r\n    public static fromArray(...resourceValueInput: [ResourceType, number][]): ResourceValue[] {\r\n        return resourceValueInput.map(input => new ResourceValue(input[0], input[1]));\r\n    } \r\n}\r\n","import React = require(\"react\");\r\nimport { Game } from \"../../../game/Game\";\r\n\r\nexport const GameContext = React.createContext<Game>(null);\r\n","export class NumberFormatter {\r\n    public static postfixes = ['', 'k', 'm', 'b'];\r\n    public static Format(number: number, maxDecimals?: number, minDecimals?: number, ceil?: boolean): string {\r\n        if (maxDecimals === undefined) {\r\n            maxDecimals = 2;\r\n        }\r\n        if (minDecimals === undefined) {\r\n            minDecimals = maxDecimals;\r\n        }\r\n        if (ceil === undefined) {\r\n            ceil = false;\r\n        }\r\n\r\n        let amountOfTimesTheNumberCanBeDividedBy1000 = 0;\r\n        while(number > 10000) {\r\n            number /= 1000;\r\n            amountOfTimesTheNumberCanBeDividedBy1000++;\r\n        }\r\n\r\n        const multiplier = Math.pow(10, maxDecimals);\r\n        let roundedNumber;\r\n        if (ceil) {\r\n            number -= 0.0001; // Floating point fix.\r\n            roundedNumber = Math.ceil(number * multiplier) / multiplier;\r\n        } else {\r\n            number += 0.0001; // Floating point fix.\r\n            roundedNumber = Math.floor(number * multiplier) / multiplier;\r\n        }\r\n\r\n        let numberString: string;\r\n        if (minDecimals) {\r\n            numberString = roundedNumber.toFixed(minDecimals);\r\n        } else {\r\n            numberString = roundedNumber.toString();\r\n        }\r\n\r\n        const postfix = NumberFormatter.postfixes[amountOfTimesTheNumberCanBeDividedBy1000];\r\n        if (postfix) {\r\n            numberString += postfix;\r\n        }\r\n        return numberString;\r\n    }\r\n}","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { UIGame } from \"./components/UIGame\";\r\n\r\nReactDOM.render(\r\n    <UIGame />,\r\n    document.getElementById(\"game-container\")\r\n);","module.exports = ReactDOM;","import * as React from \"react\";\r\nimport { Game } from \"../../../game/Game\";\r\nimport { UIResources } from \"./resources/UIResources\";\r\nimport { UIJobList } from \"./workers/UIJobList\";\r\nimport { GameContext } from \"./UIGameContext\";\r\nimport { UIBuildings } from \"./buildings/UIBuildings\";\r\nimport { UIHeader } from \"./structure/UIHeader\";\r\nimport { UIBody } from \"./structure/UIBody\";\r\n\r\nexport class UIGame extends React.Component<{}, {game: Game}> {\r\n    constructor (props: {game: Game}) {\r\n        super(props);\r\n\r\n        this.state = {game: null};\r\n    }\r\n    newGame() {\r\n        const newGame = Game.new();\r\n        newGame.buildingSystem.onUnlocked.addSubscription(this, () => this.forceUpdate());\r\n        this.setState({game: newGame});\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <UIHeader versionNumber={'0.0.1'} onNewGameClick={()=>this.newGame()}></UIHeader>\r\n                {\r\n                    this.state.game\r\n                    ? \r\n                    <GameContext.Provider value={this.state.game}>\r\n                        <UIBody game={this.state.game}></UIBody>\r\n                    </GameContext.Provider>\r\n                    : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import { Observable, ObservableFactory } from \"../common/Observable\";\r\nimport { ResourceSystem } from \"./resources/ResourceSystem\";\r\nimport { WorkerSystem } from \"./workers/WorkerSystem\";\r\nimport { BuildingSystem } from \"./buildings/BuildingSystem\";\r\n\r\nexport class Game {\r\n    private updateFrequency: number = 100;\r\n    private maxTimeToResumePerUpdate: number = 24 * 60 * 60 * 1000;\r\n\r\n    private updateIntervalID: number;\r\n    private lastUpdateAsNumber: number = Date.now();\r\n    \r\n    private startTimeAsNumber: number;\r\n\r\n    public buildingSystem: BuildingSystem;\r\n    public resourceSystem: ResourceSystem;\r\n    public workerSystem: WorkerSystem;\r\n\r\n    public onUpdate: Observable = ObservableFactory.create();\r\n\r\n    public static new(): Game {\r\n        const game = new Game();\r\n        game.init();\r\n        game.startNewGame();\r\n        return game;\r\n    }\r\n\r\n    private constructor () {}\r\n\r\n    public init (): void {\r\n        this.buildingSystem = new BuildingSystem(this);\r\n        this.buildingSystem.init();\r\n\r\n        this.resourceSystem = new ResourceSystem();\r\n        this.resourceSystem.init();\r\n\r\n        this.workerSystem = new WorkerSystem(this);\r\n        this.workerSystem.init();\r\n    }\r\n\r\n    public startNewGame (): void {\r\n        this.startTimeAsNumber = Date.now();\r\n        this.workerSystem.newGame();\r\n        this.refreshSystemsIsUnlocked();\r\n        this.resourceSystem.refreshResourcesIsUnlocked();\r\n        this.beginUpdating();\r\n    }\r\n\r\n    private beginUpdating(): void {\r\n        this.updateIntervalID = setInterval(() => {\r\n            this.update();\r\n        }, this.updateFrequency);\r\n    }\r\n\r\n    private update (): void {\r\n        let timeSinceLastUpdate = Date.now() - this.lastUpdateAsNumber;\r\n\r\n        // Cap catch up duration\r\n        if (timeSinceLastUpdate > this.maxTimeToResumePerUpdate) {\r\n            timeSinceLastUpdate = this.maxTimeToResumePerUpdate;\r\n            this.lastUpdateAsNumber = Date.now() - this.maxTimeToResumePerUpdate;\r\n        }\r\n\r\n        // Update until caught up\r\n        while (timeSinceLastUpdate > this.updateFrequency) {\r\n            timeSinceLastUpdate -= this.updateFrequency;\r\n            this.lastUpdateAsNumber = this.lastUpdateAsNumber + this.updateFrequency;\r\n\r\n            this.updateGameSystems(this.updateFrequency);\r\n        }\r\n\r\n        this.onUpdate.notify();\r\n    }\r\n\r\n    private updateGameSystems (dTime: number): void {        \r\n        this.resourceSystem.update(dTime);\r\n        this.buildingSystem.update(dTime);\r\n    }\r\n\r\n    private refreshSystemsIsUnlocked() {\r\n        this.workerSystem.isUnlocked = true;\r\n        this.resourceSystem.isUnlocked = true;\r\n        this.buildingSystem.isUnlocked = this.workerSystem.totalWorkerCount.value > 1 || this.workerSystem.idleWorkerCount === 0;\r\n    }\r\n}","export class ObservableSubscription {\r\n    public observer: object;\r\n    public callback: (...args: any[]) => void;\r\n    public constructor (observer: object, callback: (...args: any[]) => void) {\r\n        this.observer = observer;\r\n        this.callback = callback;\r\n    }\r\n}","import { GameSystem } from \"../shared/GameSystem\";\r\nimport { Resource } from \"./Resource\";\r\nimport { ResourceType } from \"./ResourceType\";\r\nimport { ResourceValueContainer } from \"./ResourceValueContainer\";\r\nimport { ResourceValue } from \"./ResourceValue\";\r\n\r\nexport class ResourceSystem extends GameSystem {\r\n    public name: string = 'Resources';\r\n    public resources: Resource[] = [];\r\n    public resourceMap: Map<ResourceType, Resource> = new Map();\r\n    public resourceCaps: ResourceValueContainer[] = [];\r\n    private addResourceType(name: string, type: ResourceType, initialCap?: number): void {\r\n        this.resources.push(new Resource(name, type, initialCap));\r\n    }\r\n    public init(): void {\r\n        this.addResourceType(\"Food\", ResourceType.Food, 500);\r\n        this.addResourceType(\"Wood\", ResourceType.Wood, 500);\r\n        this.addResourceType(\"Stone\", ResourceType.Stone, 100);\r\n        this.addResourceType(\"Pelt\", ResourceType.Pelt, 100);\r\n        this.addResourceType(\"Gold\", ResourceType.Gold, 100);\r\n        this.addResourceType(\"Devotion\", ResourceType.Devotion);\r\n\r\n        this.resources.forEach(resource => this.resourceMap.set(resource.type, resource));\r\n    }\r\n    public getResource(type: ResourceType): Resource {\r\n        return this.resourceMap.get(type);\r\n    }\r\n    public update(dTime: number): void {\r\n        this.resources.forEach(resource => {\r\n            const dAmount = resource.income.value * dTime / 1000;\r\n            resource.amount += dAmount;\r\n            resource.respectCap();\r\n        });\r\n    }\r\n    public hasResources(resourceValues: ResourceValue[]): boolean {\r\n        return resourceValues.every(resourceValue => {\r\n            const resource = this.getResource(resourceValue.resourceType);\r\n            return resource.amount >= resourceValue.value;\r\n        });\r\n    }\r\n    public payResources(resourceValues: ResourceValue[]): void {\r\n        return resourceValues.forEach(resourceValue => {\r\n            const resource = this.getResource(resourceValue.resourceType);\r\n            resource.amount -= resourceValue.value;\r\n        });\r\n    }\r\n    public refreshResourcesIsUnlocked(): void {\r\n        this.resourceMap.get(ResourceType.Food).isUnlocked = true;\r\n        this.resourceMap.get(ResourceType.Wood).isUnlocked = true;\r\n    }\r\n}\r\n","import { ValueContainer } from \"../shared/ValueContainer\";\r\nimport { ResourceType } from \"./ResourceType\";\r\nimport { Observable, ObservableFactory } from \"../../common/Observable\";\r\n\r\nexport class Resource {\r\n    private _isUnlocked: boolean = false;\r\n    public get isUnlocked(): boolean { return this._isUnlocked; };\r\n    public set isUnlocked(value) { \r\n        if (this._isUnlocked !== value) {\r\n            this._isUnlocked = value;\r\n            if (value) {\r\n                this.onUnlocked.notify();\r\n            }\r\n        }\r\n    };\r\n    public onUnlocked: Observable = ObservableFactory.create();\r\n    public amount: number = 0;\r\n    public income: ValueContainer = new ValueContainer();\r\n    public cap: ValueContainer = new ValueContainer();\r\n    public hasCap: boolean;\r\n    public name: string;\r\n    public type: ResourceType;\r\n    public constructor(name: string, type: ResourceType, initialCap?: number) {\r\n        this.name = name;\r\n        this.type = type;\r\n        if (initialCap === undefined) {\r\n            this.hasCap = false;\r\n        } else {\r\n            this.hasCap = true;\r\n            this.cap.setAdditiveModifier(this, initialCap);\r\n        }\r\n    }\r\n\r\n    public respectCap(): void {\r\n        if (this.hasCap && this.amount > this.cap.value) {\r\n            this.amount = this.cap.value;\r\n        }\r\n    }\r\n}","import { GameSystem } from \"../shared/GameSystem\";\r\nimport { ObservableWith1Argument, ObservableFactory } from \"../../common/Observable\";\r\nimport { ResourceJob } from \"./ResourceJob\";\r\nimport { ResourceType } from \"../resources/ResourceType\";\r\nimport { Game } from \"../Game\";\r\nimport { Job } from \"./Job\";\r\nimport { ValueContainer } from \"../shared/ValueContainer\";\r\n\r\nexport class WorkerSystem extends GameSystem {\r\n    private game: Game;\r\n\r\n    public name: string = 'Workers';\r\n    public idleWorkerCount: number;\r\n    public totalWorkerCount: ValueContainer;\r\n    public onIdleWorkerCountChange: ObservableWith1Argument<number>;\r\n\r\n    public gathererJob: ResourceJob;\r\n    public woodcutterJob: ResourceJob;\r\n    public resourceJobs: ResourceJob[];\r\n\r\n    public jobs: Job[];\r\n\r\n    public constructor (game: Game) {\r\n        super();\r\n        this.game = game;\r\n    }\r\n\r\n    public init(): void {\r\n        this.totalWorkerCount = new ValueContainer();\r\n        this.totalWorkerCount.setAdditiveModifier(this, 1);\r\n        this.totalWorkerCount.onValueChange.addSubscription(this, _ => this.recalculateIdleWorkerCount());\r\n\r\n        this.gathererJob = new ResourceJob(\"Gatherer\", \"Search nearby forests for berries and shrooms\", 0.5, ResourceType.Food);\r\n        this.woodcutterJob = new ResourceJob(\"Woodcutter\", \"Chop down trees for wood\", 25, ResourceType.Wood);\r\n        this.resourceJobs = [\r\n            this.gathererJob,\r\n            this.woodcutterJob\r\n        ];\r\n\r\n        this.jobs = [...this.resourceJobs];\r\n\r\n        // Bind resource jobs to resources\r\n        this.resourceJobs.forEach(job => {\r\n            const resource = this.game.resourceSystem.getResource(job.resourceType);\r\n            job.onWorkerCountChange.addSubscription(this, (workerCount: number) => {\r\n                const resourceIncomeFromJob = workerCount * job.value.value;\r\n                resource.income.setAdditiveModifier(job, resourceIncomeFromJob);\r\n            });\r\n        });\r\n\r\n        this.onIdleWorkerCountChange = ObservableFactory.createWith1Argument<number>();\r\n    }\r\n\r\n    public newGame(): void {\r\n        this.recalculateIdleWorkerCount();\r\n    }\r\n\r\n    public recalculateIdleWorkerCount(): void {\r\n        let newCount = this.totalWorkerCount.value;\r\n        this.jobs.forEach(job => newCount -= job.workerCount);\r\n        if (this.idleWorkerCount !== newCount) {\r\n            this.idleWorkerCount = newCount;\r\n            this.onIdleWorkerCountChange.notify(this.idleWorkerCount);\r\n        }\r\n    }\r\n\r\n    public setWorkerCountOnJob(job: Job, workerCount: number) {\r\n        const dWorkerCount = workerCount - job.workerCount;\r\n        if (dWorkerCount > 0) {\r\n            if (this.idleWorkerCount >= dWorkerCount) {\r\n                job.workerCount += dWorkerCount;\r\n            } else {\r\n                throw `Cannot assign ${dWorkerCount} workers - only ${this.idleWorkerCount} workers available.`;\r\n            }\r\n        } else {\r\n            if (workerCount >= 0) {\r\n                job.workerCount += dWorkerCount;\r\n            } else {\r\n                throw `Cannot assign a negative amount of workers to a job`;\r\n            }\r\n        }\r\n        this.game.buildingSystem.isUnlocked = true;\r\n        this.recalculateIdleWorkerCount();\r\n    }\r\n}","import { ResourceType } from \"../resources/ResourceType\";\r\nimport { Job } from \"./Job\";\r\n\r\nexport class ResourceJob extends Job {\r\n    public resourceType: ResourceType;\r\n\r\n    public constructor(name: string, description: string, incomePerSecond: number, resourceType: ResourceType) {\r\n        super(name, description, incomePerSecond);\r\n        this.resourceType = resourceType;\r\n    }\r\n}","import { ValueContainer } from \"../shared/ValueContainer\";\r\nimport { ObservableFactory, ObservableWith1Argument } from \"../../common/Observable\";\r\n\r\nexport class Job {\r\n    constructor (name: string, description: string, value: number) {\r\n        this._workerCount = 0;\r\n\r\n        this.name = name;\r\n        this.description = description;\r\n        this.value = new ValueContainer();\r\n        this.value.setAdditiveModifier(this, value);\r\n        this.onWorkerCountChange = ObservableFactory.createWith1Argument<number>();\r\n    }\r\n    public name: string;\r\n    public description: string;\r\n    public value: ValueContainer;\r\n    public onWorkerCountChange: ObservableWith1Argument<number>;\r\n\r\n    private _workerCount: number;\r\n    public get workerCount(): number {\r\n        return this._workerCount;\r\n    }\r\n    public set workerCount(value: number) {\r\n        this._workerCount = value;\r\n        this.onWorkerCountChange.notify(value);\r\n    }\r\n}","import { GameSystem } from \"../shared/GameSystem\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceValueContainer } from \"../resources/ResourceValueContainer\";\r\nimport { ResourceType } from \"../resources/ResourceType\";\r\nimport { Game } from \"../Game\";\r\nimport { ResourceValue } from \"../resources/ResourceValue\";\r\n\r\nexport class BuildingSystem extends GameSystem {\r\n    private game: Game;\r\n    public name: string = 'Buildings';\r\n    public buildings: Building[] = [];\r\n    public constructor(game: Game) {\r\n        super();\r\n        this.game = game;\r\n    }\r\n    private addBuilding(\r\n        name: string,\r\n        description: string,\r\n        baseCost: ResourceValue[],\r\n        additiveCostPerBuilding: ResourceValue[],\r\n        multiplicativeCostPerBuilding: ResourceValue[],\r\n        baseTimeToBuild: number,\r\n        additiveTimeToBuildPerBuilding: number,\r\n        multiplicativeTimeToBuildPerBuilding: number,\r\n        onUpdateAmount: (thisBuilding: Building) => void\r\n    ): void {\r\n        this.buildings.push(\r\n            new Building(\r\n                name, \r\n                description, \r\n                baseCost, \r\n                additiveCostPerBuilding, \r\n                multiplicativeCostPerBuilding, \r\n                baseTimeToBuild,\r\n                additiveTimeToBuildPerBuilding,\r\n                multiplicativeTimeToBuildPerBuilding,\r\n                onUpdateAmount));\r\n    }\r\n    public init(): void {\r\n        this.addBuilding(\r\n            'Hut', \r\n            'Allows another worker to join your village',\r\n            ResourceValue.fromArray([ResourceType.Wood, 100]),\r\n            ResourceValue.fromArray([ResourceType.Wood, 20]),\r\n            ResourceValue.fromArray([ResourceType.Wood, 1.2]),\r\n            1000,\r\n            500,\r\n            null,\r\n            (thisBuilding: Building): void => {\r\n              this.game.workerSystem.totalWorkerCount.setAdditiveModifier(thisBuilding, thisBuilding.amount);\r\n            }\r\n        );\r\n    }\r\n    public buyBuilding(building: Building): void {\r\n        const costOfNext = building.costOfNext.getAllAsResourceValues();\r\n        if (this.game.resourceSystem.hasResources(costOfNext)) {\r\n            this.game.resourceSystem.payResources(costOfNext);\r\n            building.startBuilding();\r\n        }\r\n    }\r\n    public update(dTime: number): void {\r\n        this.buildings.forEach(building => {\r\n            if (building.isBuildingNext) {\r\n                building.buildTimeRemaining -= dTime;\r\n                if (building.buildTimeRemaining <= 0) {\r\n                    building.finishBuilding();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}","import { ResourceValueContainer } from \"../resources/ResourceValueContainer\";\r\nimport { ObservableFactory, ObservableWith1Argument } from \"../../common/Observable\";\r\nimport { ResourceValue } from \"../resources/ResourceValue\";\r\nimport { ResourceValueContainerSet } from \"../resources/ResourceValueContainerSet\";\r\nimport { ValueContainer } from \"../shared/ValueContainer\";\r\n\r\nexport class Building {\r\n    private additiveCostPerBuilding: ResourceValue[];\r\n    private multiplicativeCostPerBuilding: ResourceValue[];\r\n    private additiveTimeToBuildPerBuilding: number;\r\n    private multiplicativeTimeToBuildPerBuilding: number;\r\n    public onBuildingStarted: ObservableWith1Argument<Building>;\r\n    public onUpdateAmount: ObservableWith1Argument<Building>;\r\n    public amount: number;\r\n    public name: string;\r\n    public description: string;\r\n    public costOfNext: ResourceValueContainerSet;\r\n    public timeToBuildNext: ValueContainer;\r\n    public buildTimeRemaining: number;\r\n    public isBuildingNext: boolean = false;\r\n    public constructor(\r\n        name: string,\r\n        description: string,\r\n        baseCost: ResourceValue[],\r\n        additiveCostPerBuilding: ResourceValue[],\r\n        multiplicativeCostPerBuilding: ResourceValue[],\r\n        baseTimeToBuild: number,\r\n        additiveTimeToBuildPerBuilding: number,\r\n        multiplicativeTimeToBuildPerBuilding: number,\r\n        onUpdateAmount: (thisBuilding: Building) => void\r\n    ) {\r\n        this.amount = 0;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.costOfNext = new ResourceValueContainerSet(baseCost);\r\n        this.timeToBuildNext = new ValueContainer(baseTimeToBuild);\r\n\r\n        this.additiveCostPerBuilding = additiveCostPerBuilding;\r\n        this.multiplicativeCostPerBuilding = multiplicativeCostPerBuilding;\r\n        this.additiveTimeToBuildPerBuilding = additiveTimeToBuildPerBuilding;\r\n        this.multiplicativeTimeToBuildPerBuilding = multiplicativeTimeToBuildPerBuilding;\r\n\r\n        this.onUpdateAmount = ObservableFactory.createWith1Argument<Building>();\r\n        this.onUpdateAmount.addSubscription(this, onUpdateAmount);\r\n\r\n        this.onBuildingStarted = ObservableFactory.createWith1Argument<Building>();\r\n    }\r\n    private refreshNextBuilding(): void {\r\n        this.refreshCostOfNextBuilding();\r\n        this.refreshTimeToBuildNextBuilding();\r\n    }\r\n    private refreshCostOfNextBuilding(): void {\r\n        this.additiveCostPerBuilding.forEach(cost => {\r\n            const newAmount = cost.value * this.amount;\r\n            this.costOfNext.setAdditiveModifier(this, cost.resourceType, newAmount);\r\n        });\r\n\r\n        this.multiplicativeCostPerBuilding.forEach(cost => {\r\n            const newAmount = Math.pow(cost.value, this.amount);\r\n            this.costOfNext.setMultiplicativeModifier(this, cost.resourceType, newAmount);\r\n        });\r\n    }\r\n    private refreshTimeToBuildNextBuilding(): void {\r\n        if (this.additiveTimeToBuildPerBuilding) {\r\n            const newAdditiveModifier = this.additiveTimeToBuildPerBuilding * this.amount;\r\n            this.timeToBuildNext.setAdditiveModifier(this, newAdditiveModifier);\r\n        }\r\n        if (this.multiplicativeTimeToBuildPerBuilding) {\r\n            const newMultiplicativeModifier = Math.pow(this.multiplicativeTimeToBuildPerBuilding, this.amount);\r\n            this.timeToBuildNext.setMultiplicativeModifier(this, newMultiplicativeModifier);\r\n        }\r\n    }\r\n    public startBuilding(): void {\r\n        this.isBuildingNext = true;\r\n        this.buildTimeRemaining = this.timeToBuildNext.value;\r\n        this.onBuildingStarted.notify(this);\r\n    }\r\n    public finishBuilding(): void {\r\n        this.amount++;\r\n        this.isBuildingNext = false;\r\n        this.refreshNextBuilding();\r\n        this.onUpdateAmount.notify(this);\r\n    }\r\n}\r\n","import { ResourceValueContainer } from \"./ResourceValueContainer\";\r\nimport { ResourceType } from \"./ResourceType\";\r\nimport { ResourceValue } from \"./ResourceValue\";\r\n\r\nexport class ResourceValueContainerSet {\r\n    private resourceValueContainerMap: Map<ResourceType, ResourceValueContainer>;\r\n    private resourceValueContainers: ResourceValueContainer[];\r\n    public constructor (resourceValues: ResourceValue[]) {\r\n        this.resourceValueContainers = resourceValues.map(val => new ResourceValueContainer(val.resourceType, val.value));\r\n        this.resourceValueContainerMap = new Map<ResourceType, ResourceValueContainer>();\r\n        this.resourceValueContainers.forEach(val => this.resourceValueContainerMap.set(val.resourceType, val)); \r\n    }\r\n    private findOrCreateResourceValueContainer(resourceType: ResourceType): ResourceValueContainer {\r\n        let resourceValueContainer = this.resourceValueContainerMap.get(resourceType);\r\n        if (!resourceValueContainer) {\r\n            resourceValueContainer = new ResourceValueContainer(resourceType);\r\n            this.resourceValueContainers.push(resourceValueContainer);\r\n            this.resourceValueContainerMap.set(resourceType, resourceValueContainer);\r\n        }\r\n        return resourceValueContainer;\r\n    }\r\n    public setAdditiveModifier (key: any, resourceType: ResourceType, amount: number): void {\r\n        const resourceValueContainer = this.findOrCreateResourceValueContainer(resourceType);\r\n        resourceValueContainer.value.setAdditiveModifier(key, amount);\r\n    }\r\n    public setMultiplicativeModifier (key: any, resourceType: ResourceType, amount: number): void {\r\n        const resourceValueContainer = this.findOrCreateResourceValueContainer(resourceType);\r\n        resourceValueContainer.value.setMultiplicativeModifier(key, amount);\r\n    }\r\n    public getAll(): ResourceValueContainer[] {\r\n        return this.resourceValueContainers;\r\n    }\r\n    public getAllAsMap(): Map<ResourceType, ResourceValueContainer> {\r\n        return this.resourceValueContainerMap;\r\n    }\r\n    public getAllAsResourceValues(): ResourceValue[] {\r\n        return this.resourceValueContainers.map(container => new ResourceValue(container.resourceType, container.value.value));\r\n    }\r\n}\r\n","import { ResourceType } from \"./ResourceType\";\r\nimport { ValueContainer } from \"../shared/ValueContainer\";\r\n\r\nexport class ResourceValueContainer {\r\n    public resourceType: ResourceType;\r\n    public value: ValueContainer;\r\n    public constructor (resourceType: ResourceType, baseValue?: number) {\r\n        this.resourceType = resourceType;\r\n        this.value = new ValueContainer(baseValue);\r\n    }\r\n}\r\n","import React = require(\"react\");\r\n\r\nexport class UIHeader extends React.Component<{versionNumber: string, onNewGameClick: () => void}> {\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div id=\"header\">\r\n                <span className=\"title-container\">\r\n                    <span className=\"title\">Quiet Village</span>\r\n                    <span className=\"version-number\">v{this.props.versionNumber}</span>\r\n                </span>\r\n                <span className=\"button btn-new-game\" onClick={this.props.onNewGameClick}>New game</span>\r\n            </div>\r\n        );\r\n    }\r\n}","import React = require(\"react\");\r\nimport { Game } from \"../../../../game/Game\";\r\nimport { UIJobList } from \"../workers/UIJobList\";\r\nimport { UIBuildings } from \"../buildings/UIBuildings\";\r\nimport { UIResources } from \"../resources/UIResources\";\r\nimport { UIGameSystemTabs } from \"./UIGameSystemTabs\";\r\nimport { GameSystem } from \"../../../../game/shared/GameSystem\";\r\n\r\nexport class UIBody extends React.Component<{game: Game},{selectedGameSystem: GameSystem}> {\r\n    // public constructor(props:{game: Game}) {\r\n    //     super(props);\r\n    //     this.state = {selectedGameSystem: props.game.workerSystem};\r\n    // }\r\n    private renderGameSystem(): JSX.Element {\r\n        if (!this.state || !this.state.selectedGameSystem || !this.state.selectedGameSystem.isUnlocked) {\r\n            return null;\r\n        }\r\n\r\n        switch(this.state.selectedGameSystem) {\r\n            case this.props.game.buildingSystem:\r\n                return <UIBuildings game={this.props.game}></UIBuildings>\r\n            case this.props.game.workerSystem:\r\n                return <UIJobList game={this.props.game}></UIJobList>\r\n            default: \r\n                return null;\r\n        }\r\n    }\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div id=\"body\">\r\n                <span id=\"tabs-and-tab-content-container\">\r\n                    <UIGameSystemTabs \r\n                        game={this.props.game} \r\n                        onSelected={(system: GameSystem)=>this.setState({selectedGameSystem:system})}\r\n                    ></UIGameSystemTabs>\r\n                    <span id=\"tab-content\">\r\n                        {this.renderGameSystem()}\r\n                    </span>\r\n                </span>\r\n                <UIResources game={this.props.game}></UIResources>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { UIJobLine } from \"./UIJobLine\";\r\nimport { Game } from \"../../../../game/Game\";\r\n\r\nexport class UIJobList extends React.Component<{game: Game}> {\r\n    constructor (props: {game: Game}) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <ul>\r\n            {this.props.game.workerSystem.jobs.map((job) => \r\n                <UIJobLine key={job.name} game={this.props.game} job={job}>\r\n                </UIJobLine>\r\n            )}\r\n            </ul>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Job } from \"../../../../game/workers/Job\";\r\nimport { Game } from \"../../../../game/Game\";\r\n\r\ninterface JobLine {\r\n    name: string,\r\n    workerCount: number\r\n}\r\nexport class UIJobLine extends React.Component<{game: Game, job: Job}, JobLine> {\r\n    public constructor (props: {game: Game, job: Job}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: this.props.job.name,\r\n            workerCount: this.props.job.workerCount\r\n        };\r\n\r\n        this.props.job.onWorkerCountChange.addSubscription(\r\n            this,\r\n            (newWorkerCount: number) => \r\n                this.setState({workerCount: newWorkerCount}));\r\n    }\r\n    private addWorker (): void {\r\n        const newWorkerCount = this.props.job.workerCount + 1;\r\n        this.setWorkers(newWorkerCount);\r\n    }\r\n    private removeWorker (): void {\r\n        const newWorkerCount = this.props.job.workerCount - 1;\r\n        this.setWorkers(newWorkerCount);\r\n    }\r\n    private setWorkers(newWorkerCount: number): void {\r\n        this.props.game.workerSystem.setWorkerCountOnJob(this.props.job, newWorkerCount);\r\n    }\r\n    public render(): JSX.Element {\r\n        return (\r\n            <li key={this.state.name}>\r\n                <span>{this.state.name}</span>\r\n                <span>{this.state.workerCount}</span>\r\n                <input type=\"button\" onClick={()=>this.addWorker()} value=\"Add\"/>\r\n                <input type=\"button\" onClick={()=>this.removeWorker()} value=\"Remove\"/>\r\n            </li>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Game } from \"../../../../game/Game\";\r\nimport { UIBuilding } from \"./UIBuilding\";\r\n\r\nexport class UIBuildings extends React.Component<{game: Game}> {\r\n    constructor (props: {game: Game}) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <ul>\r\n            {this.props.game.buildingSystem.buildings.map((building) => \r\n                <UIBuilding \r\n                    key={building.name} \r\n                    game={this.props.game} \r\n                    building={building}>\r\n                </UIBuilding>\r\n            )}\r\n            </ul>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Game } from \"../../../../game/Game\";\r\nimport { Building } from \"../../../../game/buildings/Building\";\r\nimport { UIBuildingCost } from \"./UIBuildingCost\";\r\nimport { UIProgressBar } from \"../shared/UIProgressBar\";\r\n\r\ninterface BuildingLine {\r\n    name: string,\r\n    amount: number\r\n}\r\nexport class UIBuilding extends React.Component<{game: Game, building: Building}, BuildingLine> {\r\n    public constructor (props: {game: Game, building: Building}) {\r\n        super(props);\r\n\r\n        this.props.building.onUpdateAmount.addSubscription(\r\n            this,\r\n            (thisBuilding: Building) => this.forceUpdate()\r\n        );\r\n\r\n        this.props.game.onUpdate.addSubscription(this, () => this.forceUpdate());\r\n    }\r\n    private buy (): void {\r\n        this.props.game.buildingSystem.buyBuilding(this.props.building);\r\n    }\r\n    private getAmountText(): string {\r\n        return this.props.building.amount > 0 ? '(' + this.props.building.amount + ')' : '';\r\n    }\r\n    public render(): JSX.Element {\r\n        return (\r\n            <li key={this.props.building.name} className=\"building\">\r\n                <span className=\"name-and-image-container\">\r\n                    <span className=\"name\">{this.props.building.name + this.getAmountText()}</span>\r\n                    <img src={`./img/buildings/${this.props.building.name.toLocaleLowerCase()}.png`} />\r\n                </span>\r\n                <span className=\"description-container\">\r\n                    {this.props.building.isBuildingNext &&\r\n                        <UIProgressBar min={0} max={this.props.building.timeToBuildNext.value} current={this.props.building.buildTimeRemaining}></UIProgressBar>\r\n                    }\r\n                    <span className=\"description\">{this.props.building.description}</span>\r\n                </span>\r\n                <UIBuildingCost onClick={() => this.buy()} building={this.props.building}></UIBuildingCost>\r\n            </li>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Building } from \"../../../../game/buildings/Building\";\r\nimport { GameContext } from \"../UIGameContext\";\r\nimport { NumberFormatter } from \"../../../../common/NumberFormatter\";\r\n\r\nexport class UIBuildingCost extends React.Component<{building: Building, onClick: () => void}> {\r\n    public constructor (props: {building: Building, onClick: () => void}) {\r\n        super(props);\r\n\r\n        this.props.building.onUpdateAmount.addSubscription(\r\n            this,\r\n            (thisBuilding: Building) => \r\n                this.forceUpdate()\r\n            );\r\n    }\r\n    public render(): JSX.Element {\r\n        return (\r\n            <GameContext.Consumer>\r\n            {game => \r\n                <ul className=\"resources\" onClick={this.props.onClick}>\r\n                    {this.props.building.costOfNext.getAll().map(resourceValue => \r\n                        <li className=\"resource\" key={resourceValue.resourceType}>\r\n                            <span className=\"type\">{game.resourceSystem.getResource(resourceValue.resourceType).name}</span>\r\n                            <span className=\"value\">{NumberFormatter.Format(resourceValue.value.value, 0, 0, true)}</span>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            }\r\n            </GameContext.Consumer>\r\n        );\r\n    }\r\n}","import React = require(\"react\");\r\n\r\nexport class UIProgressBar extends React.Component<{min: number, max: number, current: number}> {\r\n    private getFillPercentage(): number {\r\n        return 100 * (this.props.max - this.props.current) / (this.props.max - this.props.min); \r\n    }\r\n    public render(): JSX.Element {\r\n        return (\r\n            <span className=\"progress-bar\">\r\n                <span className=\"bar\" style={{width: this.getFillPercentage() + '%'}}></span>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Game } from \"../../../../game/Game\";\r\nimport { UIResource } from \"./UIResource\";\r\nimport { Resource } from \"../../../../game/resources/Resource\";\r\n\r\nexport class UIResources extends React.Component<{game: Game}, {resources: Resource[]}> {\r\n    constructor (props: {game: Game}) {\r\n        super(props);\r\n\r\n        const getResources = () => this.props.game.resourceSystem.resources\r\n            .filter(resource => resource.isUnlocked);\r\n\r\n        this.state = {resources: getResources()};\r\n\r\n        this.props.game.onUpdate.addSubscription(\r\n            this, \r\n            () => this.setState({resources: getResources()})\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n            <ul id=\"resource-list\">\r\n            {this.state.resources.map((resource) => \r\n                <UIResource key={resource.name} resource={resource}></UIResource>\r\n            )}\r\n            </ul>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { NumberFormatter } from \"../../../../common/NumberFormatter\";\r\nimport { Resource } from \"../../../../game/resources/Resource\";\r\n\r\nexport class UIResource extends React.Component<{resource: Resource}> {\r\n    render() {\r\n        return (\r\n            <li className=\"resource-line\">\r\n                <span>\r\n                    <span className=\"name\">{this.props.resource.name}</span>\r\n                    <span className=\"increase-per-second\">({NumberFormatter.Format(this.props.resource.income.value, 2, 2)}/s)</span>\r\n                </span>\r\n                <span>\r\n                    <span className=\"amount\">{NumberFormatter.Format(this.props.resource.amount, 2, 2)}</span>\r\n                    {\r\n                        this.props.resource.hasCap\r\n                        ? <span> / {NumberFormatter.Format(this.props.resource.cap.value, 2, 2)}</span>\r\n                        : null\r\n                    }\r\n                </span>\r\n            </li>\r\n        );\r\n    }\r\n}","import React = require(\"react\");\r\nimport { Game } from \"../../../../game/Game\";\r\nimport { GameSystem } from \"../../../../game/shared/GameSystem\";\r\nimport { UIGameSystemTab } from \"./UIGameSystemTab\";\r\n\r\nexport class UIGameSystemTabs extends React.Component<{game: Game, onSelected: (system: GameSystem)=>void}> {\r\n    private gameSystems: GameSystem[];\r\n    private allGameSystems: GameSystem[];\r\n    private selectedGameSystem: GameSystem;\r\n    public constructor(props: {game: Game, onSelected: (system: GameSystem)=>void}) {\r\n        super(props);\r\n\r\n        this.allGameSystems = [\r\n            props.game.workerSystem,\r\n            props.game.buildingSystem\r\n        ];\r\n\r\n        this.allGameSystems.forEach(system => system.onUnlocked.addSubscription(this, () => this.updateGameSystems()));\r\n\r\n        this.gameSystems = this.getUnlockedGameSystems();\r\n    }\r\n    private getUnlockedGameSystems(): GameSystem[] {\r\n        return this.allGameSystems.filter(system => system.isUnlocked);\r\n    }\r\n    private updateGameSystems(): void {\r\n        this.gameSystems = this.allGameSystems.filter(system => system.isUnlocked);\r\n        this.forceUpdate();\r\n    }\r\n    private selectGameSystem(gameSystem: GameSystem): void {\r\n        this.selectedGameSystem = gameSystem;\r\n        this.props.onSelected(gameSystem);\r\n        this.forceUpdate();\r\n    }\r\n    public componentDidMount () {\r\n        this.selectGameSystem(this.props.game.workerSystem);\r\n    }\r\n    public render(): JSX.Element {\r\n        return (\r\n            <ul id=\"tabs\">\r\n                {this.gameSystems.map(system => \r\n                    <UIGameSystemTab \r\n                        key={system.name}\r\n                        gameSystem={system} \r\n                        isSelected={system === this.selectedGameSystem}\r\n                        onSelected={()=>this.selectGameSystem(system)}\r\n                    ></UIGameSystemTab>\r\n                )}\r\n            </ul>\r\n        );\r\n    }\r\n}","import React = require(\"react\");\r\nimport { GameSystem } from \"../../../../game/shared/GameSystem\";\r\n\r\nexport class UIGameSystemTab extends React.Component<{gameSystem: GameSystem, isSelected: boolean, onSelected: () => void}> {\r\n    public render(): JSX.Element {\r\n        return (\r\n            <li className={`tab ${this.props.isSelected ? 'selected' : ''}`} onClick={this.props.onSelected}>\r\n                <img src={`./img/tabs/${this.props.gameSystem.name.toLocaleLowerCase()}.png`}/>\r\n                <span>{this.props.gameSystem.name}</span>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}